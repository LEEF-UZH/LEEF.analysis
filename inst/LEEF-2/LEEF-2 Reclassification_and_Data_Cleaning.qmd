---
title: "Reclassification and Data Cleaning of LEEF-2 data"
author: "Rainer M Krug"

format:
  html:
    dev: png
    fig_width: 10
    fig_height: 12
    toc: true
    toc_float: true
    toc_collapsed: true
    code_folding: hide  
    embed-resources: true
params:
  release: "v2.3.8-LEEF-2"
  repo: "https://github.com/LEEF-UZH/LEEF.parameter/"
  output_dir: "/Volumes/RRD.Reclassification_LEEF-2/"
  db: "LEEF-2.RRD.sqlite"
  extracted_dir: "/Volumes/LEEF-2_archive/archive/extracted/"
  toc: "/Volumes/LEEF/0.TOC/LEEF-2/toc.rds"
  min_FSC.A: 2
  flowcytometer_particles: 
    - algae
    - bacteria
  cores: 7
  remove_all:
    - OtherCiliate
  remove_flowcam:
    - Loxocephallus
  keep_flowcytometer:
    - bacteria
    - algae
  bemovi_mag_16_moving_background: 
    - 20230203_00176
  bemovi_mag_25_moving_background:
    - 20221125_00035
    - 20221205_00091
    - 20221209_00094
    - 20221212_00091
    - 20230120_00082
    - 20230526_00079
    - 20230529_00088
    - 20230609_00088
    - 20230612_00094
    - 20230721_00061
    - 20221121_00094
    - 20221128_00094
    - 20221128_00095
    - 20221212_00082
    - 20230109_00004
    - 20230130_00067
    - 20230203_00093
    - 20230306_00091
    - 20230327_00064
    - 20230417_00058
    - 20230417_00067
    - 20230505_00028
    - 20230522_00079
    - 20230526_00064
    - 20230605_00061
    - 20230609_00004
    - 20230609_00013
    - 20230717_00094
    - 20230719_00028
    - 20230721_00049
    - 20230724_00016
    - 20230807_00064
  reclassify_flowcam: false
  reclassify_bemovi_16: false
  reclassify_bemovi_25: false
  regate_flowcytometer: true
  assemble_manualcount: false
  assemble_o2: false
  aassemble_conductivity: false
  assemble_toc: false
  rename_parquet: false
  update_parquet_flowcam: true
  update_parquet_bemovi_16: true
  update_parquet_bemovi_25: true
  update_parquet_flowcytometer: true
  update_parquet_manualcount: true
  update_parquet_o2: true
  update_parquet_toc: true
  update_parquet_conductivity: true
  update_parquet_experimental_tables: true
  update_all_parquet: true
  diagnostic_report: false

---

TODO: Chek for errors in pipeline and re-run these

# Setup
1. Download parameter as defined in the `params$release` from the repo as defined in `parms$base` 
2. Create output directory as specified in `params$output_dir`
3. Check if `params$pre_processed_dir` and `params$extracted_dir` exist. The existance is only necessary for the re-classification and overlay creation (when done).
4. Create empty database `params$db` in directory `params$output_dir` database, unless it already exists


```{r}
#| label: setup
#| include: false
#|
if (!exists("params")) {
    p <- "~/git/0.RPackages/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd"
    exists <- file.exists("~/git/0.RPackages/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd")
    if(!exists){
        p <- "~/Documents_Local/git/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd"
    }

    params <- rmarkdown::yaml_front_matter(p)$params
}

knitr::opts_chunk$set(
    echo = TRUE,
    eval = FALSE,
    message = TRUE,
    warning = TRUE
)

tag <- paste0(params$release, "_", format(Sys.Date(), "%Y%m%d"))

library(tictoc)

knitr::knit_hooks$set(
    timeit = function(before, options, envir) {
        if (before) {
            ## code to be run before a chunk
            tic()
        } else {
            ## code to be run after a chunk
            elapsed <- toc()$toc
            print(paste0("Execution took ", elapsed, " seconds"))
        }
    }
)

####

library("LEEF.analysis")
library(dplyr)
library(pbmcapply)
library(pbapply)
library(yaml)
library(tidyr)
library(DBI)
library(RSQLite)
library(lubridate)

## 1. ------

pdir <- tempfile(pattern = paste0("parameter_", params$release))

dir.create(pdir, showWarnings = FALSE, recursive = TRUE)

on.exit({
    try(unlink(pdir), silent = TRUE)
})

download.file(
    url = paste0(params$repo, "archive/refs/tags/", params$release, ".zip"),
    destfile = file.path(pdir, paste0(params$release, ".zip")),
    mode = "wb"
)

unzip(file.path(pdir, paste0(params$release, ".zip")), exdir = pdir)

parameter_dir <- list.dirs(pdir, recursive = FALSE)

## 2. -----
dir.create(params$output_dir, recursive = TRUE, showWarnings = FALSE)

## 3. -----

if (!file.exists(params$extracted_dir)) {
    warning(
        "This is not a problem when not reclassifying! \n",
        "Archive directory is not valid! \n",
        "It does not contain the folder '", params$extracted_dir, "'.\n",
        "Probably not mounted?"
    )
}

if (!params$rename_parquet) {
parquet_dir <- file.path(
    params$output_dir,
    paste0("parquet_", tag)
)
} else {
parquet_dir <- file.path(
    params$output_dir,
    paste0("parquet_renamed_", tag)
)

}


```

# 1. Re-calculations for all timestamps

TODO: There are still timestamps missing which did not make it thorough the pipeline, but all should be in the pre-processed directory. Check if they are there and re-run the extraction from there. If necessary, the pre-processing needds to be run again from =the raw data (available!).

## Reclassification of Flowcam


### Classify Flowcam
```{r}
#| label: flowcam_classify
#| eval: !expr params$reclassify_flowcam
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcam\\.flowcam\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcam\\.flowcam\\.", "", timestamps)

out <- file.path(params$output_dir, "flowcam")

if (!file.exists(out)) {
    message("Classifying flowcam...")
    tic()
    LEEF_2_classify_flowcam_archive(
        extracted_dir = params$extracted_dir,
        timestamps = timestamps,
        algae_traits_name = "algae_traits_filtered.rds",
        classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "svm_flowcam_classifiers.rds")),
        species_tracked = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "flowcam.yml"))$species_tracked,
        output = out,
        mc.cores = params$cores
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "skipping Flowcam classification."
    )
}

rm(timestamps)
```

### Flowcam remove species not needed

```{r}
#| label: flowcam_remove_species
#| eval: !expr params$reclassify_flowcam
#| 

fns <- list.files(
  file.path(params$output_dir, "flowcam"),
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  sample(fns),
  function(fn){
    x <- readRDS(fn) |>
      dplyr::filter(!(species %in% c(params$remove_flowcam)))
    unlink(fn)
    saveRDS(x, file = fn)
  },
  mc.cores = params$cores,
  mc.preschedule = FALSE
)
```



### Calculate Biomass Flowcam
The biomass is calculated here

```{r}
#| label: flowcam_biomass
#| eval: !expr params$reclassify_flowcam

# #| eval: !expr params$#| reclassify_flowcam

fns <- list.files(
    path = file.path(params$output_dir, "flowcam"),
    pattern = "algae_traits",
    recursive = FALSE,
    full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "algae_traits",
                replacement = "algae_density"
            )
        biomass_flowcam <- LEEF_2_biomass_flowcam(
            algae_traits = readRDS(fn_traits),
            algae_density = readRDS(fn_dens)
        )

        saveRDS(biomass_flowcam$traits, file = fn_traits)
        saveRDS(biomass_flowcam$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()
```


## Reclassification of Bemovi 16


### Classify `bemovi_extract.mag.16.yml`
```{r}
#| label: bemovi_16_classify
#| eval: !expr params$reclassify_bemovi_16
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.", "", timestamps)

out <- file.path(params$output_dir, "bemovi_mag_16")

if (!file.exists(out)) {
    message("Classifying bemovi_extract.mag.16")
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 16,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "svm_video_classifiers_16x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "bemovi_extract.mag.16.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_16_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, " exists\n",
        "Skipping bemovi_extract.mag.16 classification."
    )
}

rm(timestamps)
```



### Calculate Biomass Bemovi 16
The biomass is calculated here

```{r}
#| label: bemovi_16_biomass
#| eval: !expr params$reclassify_bemovi_16
#|

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "morph_mvt",
    recursive = FALSE,
    full.names = TRUE
)

tic()

pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_16 <- LEEF_2_biomass_bemovi_16(
            ciliate_traits_16 = traits,
            ciliate_density_16 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_16$traits, file = fn_traits)
        saveRDS(biomass_bemovi_16$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = 1 # when using more, some timestamps were not there... was: params$cores
)

toc()
```


## Reclassification of Bemovi 25

### Classify `bemovi_mag.25` excluding moving_background

```{r}
#| label: bemovi_25_classify
#| eval: !expr params$reclassify_bemovi_25
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.", "", timestamps)

out <- file.path(params$output_dir, "bemovi_mag_25")
if (!file.exists(out)) {
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = 1 # params$cores
        )
    )
    toc()

    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.cropped.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "Skipping all bemovi_mag_25 classifcations"
    )
}

rm(timestamps)
```



### Calculate Biomass Bemovi 25
The biomass is calculated here

```{r}
#| label: bemovi_25_biomass
#| eval: !expr params$reclassify_bemovi_25

## Bemovi 25

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "morph_mvt\\.",
    recursive = FALSE,
    full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25(
            ciliate_traits_25 = traits,
            ciliate_density_25 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_25$traits, file = fn_traits)
        saveRDS(biomass_bemovi_25$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()

## Bemovi 25 cropped

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "morph_mvt_cropped\\.",
    recursive = FALSE,
    full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25_cropped(
            ciliate_traits_25 = traits,
            ciliate_density_25 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_25$traits, file = fn_traits)
        saveRDS(biomass_bemovi_25$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()
```


## TODO Regate Flowcytometer

### Flowcytometer Density
```{r}
#| label: density_flowcytometer
#|

## Select all timestamps

timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcytometer\\.flowcytometer\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcytometer\\.flowcytometer\\.", "", timestamps)

## Density

LEEF_2_density_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    timestamps = timestamps,
    output = file.path(params$output_dir, "flowcytometer"),
    use_H = FALSE,
    gates_coordinates = read.csv( file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv") ),
    min_FSC.A = params$min_FSC.A,
    particles = params$flowcytometer_particles
)

```

### Flowcytometer Traits and Biomass
 ```{r}
#| label: traits_biomass_flowcytometer
#|
## Extract traits and Biomass
biomass_per_bottle <- LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv( file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv") ),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps,
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept
)

rm(timestamps)
```

## Assemble TOC
```{r}
#| label: assemble_toc_detrended
#| eval: !expr params$assemble_toc
#|

tp <- file.path(params$output_dir, "toc")
dir.create(tp, showWarnings = FALSE, recursive = TRUE)

file.copy(
    from = params$toc,
    to = file.path(tp, basename(params$toc))
)

rm(tp)
```

## Assemble O2
```{r}
#| label: assemble_o2
#| eval: !expr params$assemble_o2
#|

fns_o2 <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.o2meter\\.o2meter\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("o2meter.csv")

dp <- file.path(params$output_dir, "o2meter")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

fns_to <- file.path(
    dp,
    paste0(
        fns_o2 |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.o2meter.o2meter."), replacement = "") |>
            gsub(pattern = "/o2meter.csv", replacement = ""),
        ".rds"
    )
)

for (i in 1:length(fns_o2)) {
    read.csv(fns_o2[i]) |>
        mutate(Temp = as.double(Temp)) |>
        saveRDS(file = fns_to[i])
}

rm(dp, fns_o2)
```

## Assemble Conductivity
```{r}
#| label: assemble_conductivity
#| eval: !expr params$assemble_conductivity
#|

from <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.conductivity\\.conductivity\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("conductivity.csv")

dp <- file.path(params$output_dir, "conductivity")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

to <- file.path(
    dp,
    paste0(
        from |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.conductivity.conductivity."), replacement = "") |>
            gsub(pattern = "/conductivity.csv", replacement = ""),
        ".csv"
    )
)

file.copy(from = from, to = to)

rm(dp, from, to)
```


## Assemble manualcount
```{r}
#| label: assemble_manualcount
#| eval: !expr params$assemble_manualcount
#|

fns_mc <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.manualcount\\.manualcount\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("manualcount_density.csv")

dp <- file.path(params$output_dir, "manualcount")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

file.path(
    dp,
    paste0(
        "manualcount.",
        fns_mc |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.manualcount.manualcount."), replacement = "") |>
            gsub(pattern = "/manualcount_density.csv", replacement = ""),
        ".csv"
    )
) |>
    file.copy(from = fns_mc)

rm(dp, fns_mc)
```

# Create parquet

```{r}
#| label: create_parquet
#| eval: true
#| 


dir.create(parquet_dir, showWarnings = FALSE, recursive = TRUE)
```

```{r}
#| label: add_bemovi_mag_16
#| eval: !expr params$update_all_parquet | params$update_parquet_bemovi_16
#| 

## bemovi mag 16
list.files(
    file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    parquet_add_bemovi_16(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)

```

```{r}
#| label: add_bemovi_mag_25
#| eval: !expr params$update_all_parquet | params$update_parquet_bemovi_25
#| 

## bemovi mag 25
list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE, invert = TRUE) |>
    parquet_add_bemovi_25(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)

list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE) |>
    parquet_add_bemovi_25_cropped(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)
```

```{r}
#| label: add_flowcam
#| eval: !expr params$update_all_parquet | params$update_parquet_flowcam
#| 

## flowcam
list.files(
    file.path(params$output_dir, "flowcam"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    parquet_add_flowcam(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)

```

```{r}
#| label: add_flowcytometer
#| eval: !expr params$update_all_parquet | params$update_parquet_flowcytometer
#|

## flowcytometer

list.files(
    file.path(params$output_dir, "flowcytometer"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    parquet_add_flowcytometer(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)
```

```{r}
#| label: add_manualcount
#| eval: !expr params$update_all_parquet | params$update_parquet_manualcount
#| 

## manualcount
list.files(
    path = file.path(params$output_dir, "manualcount"),
    recursive = FALSE,
    full.names = TRUE
) |>
    parquet_add_manualcount(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)


```

```{r}
#| label: add_toc
#| eval: !expr params$update_all_parquet | params$update_parquet_toc
#| 

## toc
parquet_add_toc(
    fn = file.path(params$output_dir, "toc", "toc.rds"),
    path_to_parquet_root_dir = parquet_dir, 
    rename = params$rename_parquet
)


```

```{r}
#| label: add_o2meter
#| eval: !expr params$update_all_parquet | params$update_parquet_o2meter
#| 

## o2meter
list.files(
    path = file.path(params$output_dir, "o2meter"),
    recursive = FALSE,
    full.names = TRUE
) |>
    parquet_add_o2(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)


```

```{r}
#| label: add_conductivity
#| eval: !expr params$update_all_parquet | params$update_parquet_conductivity
#| 

## conductivity
list.files(
    path = file.path(params$output_dir, "conductivity"),
    recursive = FALSE,
    full.names = TRUE
) |>
    parquet_add_conductivity(path_to_parquet_root_dir = parquet_dir, rename = params$rename_parquet)



```

```{r}
#| label: add_experimental_tables
#| eval: !expr params$update_all_parquet | params$update_parquet_experimental_tables
#| 

## experimental tables
object <- read.csv(file.path(parameter_dir, "parameter", "00.general.parameter", "compositions.csv"))
if (params$rename_parquet) {
    object <- LEEF_2_rename_composition(object)
}
unlink(file.path(parquet_dir, "composition"), recursive = TRUE, force = TRUE)
object_to_parquet(
    object = object,
    path_to_parquet = file.path(parquet_dir, "composition")
)
    
object <- read.csv(file.path(parameter_dir, "parameter", "00.general.parameter", "experimental_design.csv"))
if (params$rename_parquet) {

}
unlink(file.path(parquet_dir, "experimental_design"), recursive = TRUE, force = TRUE)
object_to_parquet(
    object = object,
    path_to_parquet = file.path(parquet_dir, "experimental_design")
)

object <- read.csv(file.path(parameter_dir, "treatment", "stressor_levels.csv"))
if (params$rename_parquet) {

}
unlink(file.path(parquet_dir, "stressor_levels"), recursive = TRUE, force = TRUE)
object_to_parquet(
    object = object,
    path_to_parquet = file.path(parquet_dir, "stressor_levels")
)

```

# TODO Create Diagnostic Report
The Diagnostic report needs to be created before the renaming as it does rely on the otriginal terminology.

```{r}
#| label: createDiagReport
#| eval: !expr params$diagnostic_report
#| 
options(knitr.duplicate.label = "allow")

LEEF_2_report_diagnostic(
    lastDays = 300,
    suffix = paste0("LEEF-2_reclassified_", params$release, "_", tag), 
    format = "html",
    arrow = TRUE,
    parquet_dir = parquet_dir
)
```
