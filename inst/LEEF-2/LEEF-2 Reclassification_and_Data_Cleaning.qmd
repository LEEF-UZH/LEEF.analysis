---
title: "Reclassification and Data Cleaning of LEEF-2 data"
author: "Rainer M Krug"

format:
  html:
    dev: png
    fig_width: 10
    fig_height: 12
    toc: true
    toc_float: true
    toc_collapsed: true
    code_folding: hide  
    embed-resources: true
params:
  release: "v2.3.8-LEEF-2"
  repo: "https://github.com/LEEF-UZH/LEEF.parameter/"
  output_dir: "/Users/owenpetchey/Desktop/LEEF2_flowcyt_data_test/level3-RRD/"
  extracted_dir: "/Users/owenpetchey/Desktop/LEEF2_flowcyt_data_test/level2-extracted/"
  toc: "/Volumes/LEEF/0.TOC/LEEF-2/toc.rds"
  min_FSC.A: 2
  flowcytometer_particles: 
    - algae
    - bacteria
  cores: 6
  remove_all:
    - OtherCiliate
  flowcam_species:
    - "Chlamydomonas"
    - "ChlamydomonasClumpsLarge"
    - "ChlamydomonasClumpsSmall"
    - "CiliateCysts"
    - "CystsWhite" 
    - "Debris"
    - "DigestedAlgae"
    - "DigestedWhite"
    - "DividingChlamydomonas"
    - "Small_cells"
    - "Small_unidentified"
  remove_flowcam:
    - Loxocephallus
    - OtherCiliate
  keep_flowcytometer:
    - bacteria
    - algae
  remove_bemovi:
    - Euplotes
    - Loxocephallus
  remove_bottles_flowcytometer:
    - b_101
    - b_102
    - b_103
    - b_104
  bemovi_mag_16_moving_background: 
    - 20230203_00176
  bemovi_mag_25_moving_background:
    - 20221121_00094
    - 20221125_00035
    - 20221128_00094
    - 20221128_00095
    - 20221205_00091
    - 20221209_00094
    - 20221212_00082
    - 20221212_00091
    - 20230109_00004
    - 20230120_00082
    - 20230130_00067
    - 20230203_00093
    - 20230306_00091
    - 20230327_00064
    - 20230417_00058
    - 20230417_00067
    - 20230424_00091
    - 20230505_00028
    - 20230512_00086
    - 20230517_00055
    - 20230522_00079
    - 20230526_00064
    - 20230526_00079
    - 20230529_00088
    - 20230605_00061
    - 20230609_00004
    - 20230609_00013
    - 20230609_00088
    - 20230612_00094
    - 20230717_00094
    - 20230719_00028
    - 20230721_00049
    - 20230721_00061
    - 20230724_00016
    - 20230807_00064



  reclassify_flowcam: false
  reclassify_bemovi_16: false
  reclassify_bemovi_25: false
  regate_flowcytometer: true  
  assemble_manualcount: false
  assemble_o2: false
  assemble_conductivity: false
  assemble_toc: false

  update_parquet_flowcam: false
  update_parquet_bemovi_16: false
  update_parquet_bemovi_25: false
  update_parquet_flowcytometer: false
  update_parquet_manualcount: false
  update_parquet_o2: false
  update_parquet_conductivity: false
  update_parquet_toc: false
  
  update_parquet_experimental_tables: false

---

# To run parts

Run a whole chunk so that the parameters above are read in.

```{r}
## run this chunk to make params
```


# Setup
0. Install required packages
1. Download parameter as defined in the `params$release` from the repo as defined in `parms$base` 
2. Create output directory as specified in `params$output_dir`
3. Check if `params$pre_processed_dir` and `params$extracted_dir` exist. The existance is only necessary for the re-classification and overlay creation (when done).


```{r}
#| eval: false
## to install packages
## Do not use drat as it will not be maintained 
#drat::addRepo("LEEF-UZH") don't do this
getOption("repos")

## First must install bioconductor and flowcore
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
## BiocManager::install(version = "3.18") ## this may be required with the version changed
#BiocManager::install("flowCore")

## Get from github, latest version
#remotes::install_github("LEEF-UZH/LEEF", ref = "LEEF-2", force = TRUE) ## this installs dependencies using drat
#remotes::install_github("LEEF-UZH/LEEF.measurement.flowcytometer", ref = "LEEF-1")
#remotes::install_github("LEEF-UZH/LEEF.measurement.bemovi", ref = "LEEF-1")
#remotes::install_github("LEEF-UZH/LEEF.measurement.flowcam", ref = "LEEF-1")
#remotes::install_github("LEEF-UZH/LEEF.measurement.flowcytometer", ref = "LEEF-2")
#remotes::install_github("LEEF-UZH/LEEF.measurement.bemovi", ref = "LEEF-2")
#remotes::install_github("LEEF-UZH/LEEF.measurement.flowcam", ref = "LEEF-2")
#remotes::install_github("LEEF-UZH/LEEF.measurement.conductivity", ref = "master")
#remotes::install_github("LEEF-UZH/LEEF.measurement.o2meter", ref = "master")
#remotes::install_github("LEEF-UZH/LEEF.measurement.manualcount", ref = "master")
#remotes::install_github("LEEF-UZH/LEEF.analysis", ref = "master")
#remotes::install_github("LEEF-UZH/bemovi", ref = "LEEF")


```



```{r}
#| label: setup
#| include: false
#|

set.seed(13) ## just in case

## this is visual studio code -- can be ignored
# if (!exists("params")) {
#     p <- "~/git/0.RPackages/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd"
#     exists <- file.exists("~/git/0.RPackages/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd")
#     if (!exists) {
#         p <- "~/Documents_Local/git/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd"
#     }
# 
#     params <- rmarkdown::yaml_front_matter(p)$params
# }

knitr::opts_chunk$set(
    echo = TRUE,
    eval = FALSE,
    message = TRUE,
    warning = TRUE,
    message = NA
)

tag <- paste0(params$release, "_", format(Sys.Date(), "%Y%m%d"))

library(tictoc)

knitr::knit_hooks$set(
    timeit = function(before, options, envir) {
        if (before) {
            ## code to be run before a chunk
            tic()
        } else {
            ## code to be run after a chunk
            elapsed <- toc()$toc
            print(paste0("Execution took ", elapsed, " seconds"))
        }
    }
)



####

library("LEEF.analysis")
library(LEEF.2.measurement.flowcytometer)
library(dplyr)
library(pbmcapply)
library(pbapply)
library(yaml)
library(tidyr)
library(DBI)
library(RSQLite)
library(lubridate)

## 1. ------

pdir <- tempfile(pattern = paste0("parameter_", params$release))

dir.create(pdir, showWarnings = FALSE, recursive = TRUE)

on.exit({
    try(unlink(pdir), silent = TRUE)
})

download.file(
    url = paste0(params$repo, "archive/refs/tags/", params$release, ".zip"),
    destfile = file.path(pdir, paste0(params$release, ".zip")),
    mode = "wb"
)

unzip(file.path(pdir, paste0(params$release, ".zip")), exdir = pdir)

parameter_dir <- list.dirs(pdir, recursive = FALSE)

## 2. -----
dir.create(params$output_dir, recursive = TRUE, showWarnings = FALSE)

## 3. -----

if (!file.exists(params$extracted_dir)) {
    warning(
        "This is not a problem when not reclassifying! \n",
        "Archive directory is not valid! \n",
        "It does not contain the folder '", params$extracted_dir, "'.\n",
        "Probably not mounted?"
    )
}

parquet_dir <- file.path(
    params$output_dir,
    paste0("parquet_", tag)
)
parquet_dir_renamed <- file.path(
    params$output_dir,
    paste0("parquet_", tag, "_renamed")
)

## Expected timestamps
exp_days <- sort(c(0 + (0:39 * 7), 2 + (0:39 * 7), 4 + (0:39 * 7)))
exp_timestamps <- as_date("20221107", format = "%Y%m%d") + exp_days
exp_timestamps <- gsub("-", "", as.character(exp_timestamps))

## Expected bottles
exp_bottles <- paste0("b_", sprintf("%02d", 1:32))
```


# Re-calculations for all timestamps

## Reclassification of Flowcam

### Classify Flowcam
```{r}
#| label: flowcam_classify
#| eval: !expr params$reclassify_flowcam
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcam\\.flowcam\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcam\\.flowcam\\.", "", timestamps)

out <- file.path(params$output_dir, "flowcam")

## for testing: timestamps <- timestamps[1:2]

if (!file.exists(out)) {
    message("Classifying flowcam...")
    tic()
    LEEF_2_classify_flowcam_archive(
        extracted_dir = params$extracted_dir,
        timestamps = timestamps,
        algae_traits_name = "algae_traits_filtered.rds",
        classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "svm_flowcam_classifiers.rds")),
        species_tracked = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "flowcam.yml"))$species_tracked,
        output = out,
        mc.cores = params$cores
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "skipping Flowcam classification."
    )
}

rm(timestamps)
```

### Flowcam remove species not needed

```{r}
#| label: flowcam_remove_species
#| eval: !expr params$reclassify_flowcam
#|

fns <- list.files(
    file.path(params$output_dir, "flowcam"),
    recursive = FALSE,
    full.names = TRUE
)

pbmcapply::pbmclapply(
    sample(fns),
    function(fn) {
        x <- readRDS(fn) |>
            dplyr::filter(!(species %in% c(params$remove_flowcam)))
        unlink(fn)
        saveRDS(x, file = fn)
    },
    mc.cores = params$cores,
    mc.preschedule = FALSE
)
```



### Calculate Biomass Flowcam
The biomass is calculated here

```{r}
#| label: flowcam_biomass
#| eval: !expr params$reclassify_flowcam

fns <- list.files(
    path = file.path(params$output_dir, "flowcam"),
    pattern = "algae_traits",
    recursive = FALSE,
    full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "algae_traits",
                replacement = "algae_density"
            )
        biomass_flowcam <- LEEF_2_biomass_flowcam(
            algae_traits = readRDS(fn_traits),
            algae_density = readRDS(fn_dens)
        )

        saveRDS(biomass_flowcam$traits, file = fn_traits)
        saveRDS(biomass_flowcam$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()
```

### Adding density = NA for missing species and set timestamp 20230719 bottle 1 to NA

```{r}
#| label: flowcam_missing_zero
#| eval: !expr params$reclassify_flowcam

fns <- list.files(
    path = file.path(params$output_dir, "flowcam"),
    pattern = "density",
    full.names = TRUE,
    recursive = FALSE
)


pbmcapply::pbmclapply(
    fns,
    function(fn) {
        x <- readRDS(fn)

        if (grepl("20230719", fn)) {
            x <- x |>
                dplyr::filter(bottle == "b_02") |>
                mutate(
                    bottle = "b_01",
                    incubator = "A",
                    temperature = "increasing",
                    resources = "constant",
                    salinity = "constant",
                    replicate = 1,
                    volume_imaged = NA,
                    dilution_factor = NA,
                    count = NA,
                    density = NA,
                    biomass = NA
                ) |>
                bind_rows(x)
        }
        x_list <- split(
            x = x,
            f = x$bottle,
            drop = TRUE
        )

        for (i in seq_along(x_list)) {
            if (!all(params$flowcam_species %in% unique(x_list[[i]]$species))) {
                templ <- x_list[[i]][1, ]
                templ$density <- NA
                templ$count <- NA
                templ$biomass <- NA

                for (spm in (params$flowcam_species[!(params$flowcam_species %in% x_list[[i]]$species)])) {
                    templ$species <- spm
                    x_list[[i]] <- rbind(x_list[[i]], templ)
                }
            }
        }

        x <- do.call("rbind", x_list)

        ###### HERE END
        saveRDS(x, fn)
    },
    mc.cores = params$cores
)
```

## Reclassification of Bemovi 16


### Classify `bemovi_extract.mag.16.yml`
```{r}
#| label: bemovi_16_classify
#| eval: !expr params$reclassify_bemovi_16
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.", "", timestamps)

## for testing: timestamps <- timestamps[1:2]

out <- file.path(params$output_dir, "bemovi_mag_16")

if (!file.exists(out)) {
    message("Classifying bemovi_extract.mag.16")
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 16,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "svm_video_classifiers_16x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "bemovi_extract.mag.16.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_16_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, " exists\n",
        "Skipping bemovi_extract.mag.16 classification."
    )
}

rm(timestamps)
```


### Remove species and not needed and manual reclassification in Bemovi 16

```{r}
#| label: bemovi_16_remove_species
#| eval: !expr params$reclassify_bemovi_16
#|

fns <- list.files(
    file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "rds",
    recursive = FALSE,
    full.names = TRUE
)

pbmcapply::pbmclapply(
    sample(fns),
    function(fn) {
        x <- readRDS(fn) |>
            dplyr::filter(!(species %in% c(params$remove_bemovi)))
        fn_sp <- strsplit(basename(fn), "\\.")
        fn_sp[[1]][2] <- as.numeric(fn_sp[[1]][2])
        if ((fn_sp[[1]][1] == "morph_mvt") & (fn_sp[[1]][2] >= 20230403)) {
            x <- x |>
                mutate(
                    species = ifelse(
                        (species == "Colpidium") & (bottle %in% c("b_02", "b_15", "b_20", "b_31")),
                        "Paramecium_caudatum",
                        species
                    )
                )
        }
        if ((fn_sp[[1]][1] == "mean_density_per_ml") & (fn_sp[[1]][2] >= 20230203)) {
            colp <- x |>
                dplyr::filter(species == "Colpidium") |>
                dplyr::filter(bottle %in% c("b_02", "b_15", "b_20", "b_31")) |>
                dplyr::mutate(density = 0)
            x <- x |>
                mutate(
                    species = ifelse(
                        (species == "Colpidium") & (bottle %in% c("b_02", "b_15", "b_20", "b_31")),
                        "Paramecium_caudatum",
                        species
                    )
                ) |>
                tibble::add_row(colp) |>
                group_by(timestamp, date, species, bottle, resources, temperature, salinity, magnification, sample, replicate, dens_factor) |>
                summarize(density = sum(density), .groups = "drop") |>
                arrange(timestamp, bottle, species)
        }
        unlink(fn)
        saveRDS(x, file = fn)
    },
    mc.cores = params$cores,
    mc.preschedule = FALSE
)
```

### Calculate Biomass Bemovi 16
The biomass is calculated here

```{r}
#| label: bemovi_16_biomass
#| eval: !expr params$reclassify_bemovi_16
#|

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "morph_mvt",
    recursive = FALSE,
    full.names = TRUE
)

tic()

lapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi <- LEEF_2_biomass_bemovi(
            ciliate_traits = traits,
            ciliate_density = readRDS(fn_dens),
            extrapolation_factor = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "bemovi_extract.mag.16.yml"))$extrapolation.factor,
            cropping_factor = 1
        )

        saveRDS(biomass_bemovi$traits, file = fn_traits)
        saveRDS(biomass_bemovi$density, file = fn_dens)
    }
)

toc()
```

### Add missing timestamps `20230602` `20230616` `20230621` as NA
These timestamps were corrupted before ingestion into the pipeline and will be put back as `NA` values.

```{r}
#| label: bemovi_16_missing_datapoints
#| eval: !expr params$reclassify_bemovi_16
#|

fn <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "density",
    recursive = FALSE,
    full.names = TRUE
) |>
    grep(pattern = "20221107", value = TRUE)

template <- fn |>
    readRDS() |>
    mutate(
        density = NA,
        biomass = NA,
        count = NA
    )

template |>
    mutate(timestamp = "20230602") |>
    saveRDS(file = gsub("20221107", "20230602", fn))

template |>
    mutate(timestamp = "20230616") |>
    saveRDS(file = gsub("20221107", "20230616", fn))

template |>
    mutate(timestamp = "20230621") |>
    saveRDS(file = gsub("20221107", "20230621", fn))
```

## Reclassification of Bemovi 25

### Classify `bemovi_mag.25` excluding moving_background

```{r}
#| label: bemovi_25_classify
#| eval: !expr params$reclassify_bemovi_25
#|
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.", "", timestamps)

out <- file.path(params$output_dir, "bemovi_mag_25")
if (!file.exists(out)) {
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = params$cores
        )
    )
    toc()

    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.cropped.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "Skipping all bemovi_mag_25 classifcations"
    )
}

rm(timestamps)
```


### Remove species not needed in Bemovi 25

```{r}
#| label: bemovi_25_remove_species
#| eval: !expr params$reclassify_bemovi_25
#|

fns <- list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "rds",
    recursive = FALSE,
    full.names = TRUE
)

lapply(
    sample(fns),
    function(fn) {
        x <- readRDS(fn) |>
            dplyr::filter(!(species %in% c(params$remove_bemovi)))
        fn_sp <- strsplit(basename(fn), "\\.")
        fn_sp[[1]][2] <- as.numeric(fn_sp[[1]][2])
        if ((fn_sp[[1]][1] == "morph_mvt") & (fn_sp[[1]][2] >= 20230403)) {
            x <- x |>
                mutate(
                    species = ifelse(
                        (species == "Colpidium") & (bottle %in% c("b_02", "b_15", "b_20", "b_31")),
                        "Paramecium_caudatum",
                        species
                    )
                )
        }
        if ((fn_sp[[1]][1] == "mean_density_per_ml") & (fn_sp[[1]][2] >= 20230203)) {
            colp <- x |>
                dplyr::filter(species == "Colpidium") |>
                dplyr::filter(bottle %in% c("b_02", "b_15", "b_20", "b_31")) |>
                dplyr::mutate(density = 0)
            x <- x |>
                mutate(
                    species = ifelse(
                        (species == "Colpidium") & (bottle %in% c("b_02", "b_15", "b_20", "b_31")),
                        "Paramecium_caudatum",
                        species
                    )
                ) |>
                tibble::add_row(colp) |>
                group_by(timestamp, date, species, bottle, resources, temperature, salinity, magnification, sample, replicate, dens_factor) |>
                summarize(density = sum(density), .groups = "drop") |>
                arrange(timestamp, bottle, species)
        }
        unlink(fn)
        saveRDS(x, file = fn)
    }
)
```

### Calculate Biomass Bemovi 25
The biomass is calculated here

```{r}
#| label: bemovi_25_biomass
#| eval: !expr params$reclassify_bemovi_25

## Bemovi 25

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "morph_mvt\\.",
    recursive = FALSE,
    full.names = TRUE
)

tic()
lapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        message(fn_traits)

        biomass_bemovi <- LEEF_2_biomass_bemovi(
            ciliate_traits = traits,
            ciliate_density = readRDS(fn_dens),
            extrapolation_factor = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.yml"))$extrapolation.factor,
            cropping_factor = 1
        )

        unlink(fn_traits)
        saveRDS(
            biomass_bemovi$traits,
            file = fn_traits
        )
        unlink(fn_dens)
        saveRDS(
            biomass_bemovi$density,
            file = fn_dens
        )
    }
)
toc()

## Bemovi 25 cropped

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "morph_mvt_cropped\\.",
    recursive = FALSE,
    full.names = TRUE
)

tic()
lapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        message(fn_traits)

        biomass_bemovi <- LEEF_2_biomass_bemovi(
            ciliate_traits = traits,
            ciliate_density = readRDS(fn_dens),
            extrapolation_factor = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.cropped.yml"))$extrapolation.factor,
            cropping_factor = 4
        )

        unlink(fn_traits)
        saveRDS(
            biomass_bemovi$traits,
            file = fn_traits
        )
        unlink(fn_dens)
        saveRDS(
            biomass_bemovi$density,
            file = fn_dens
        )
    }
)
toc()
```

### Add missing timestamps `20230602` `20230616` `20230621` as NA
These timestamps were corrupted before ingestion into the pipeline and will be put back as `NA` values.

```{r}
#| label: bemovi_25_missing_datapoints
#| eval: !expr params$reclassify_bemovi_25
#|

fn <- list.files( #|
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "mean_density_per_ml\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    grep(pattern = "20221107", value = TRUE)

template <- fn |>
    readRDS() |>
    mutate(
        density = NA,
        biomass = NA,
        count = NA
    )

template |>
    mutate(timestamp = "20230602") |>
    saveRDS(file = gsub("20221107", "20230602", fn))

template |>
    mutate(timestamp = "20230616") |>
    saveRDS(file = gsub("20221107", "20230616", fn))

template |>
    mutate(timestamp = "20230621") |>
    saveRDS(file = gsub("20221107", "20230621", fn))


fn <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "mean_density_per_ml_cropped\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    grep(pattern = "20221107", value = TRUE)

template <- fn |>
    readRDS() |>
    mutate(
        density = NA,
        biomass = NA,
        count = NA
    )

template |>
    mutate(timestamp = "20230602") |>
    saveRDS(file = gsub("20221107", "20230602", fn))

template |>
    mutate(timestamp = "20230616") |>
    saveRDS(file = gsub("20221107", "20230616", fn))

template |>
    mutate(timestamp = "20230621") |>
    saveRDS(file = gsub("20221107", "20230621", fn))

```


## Regate Flowcytometer

### Flowcytometer Density

```{r}
#| label: density_flowcytometer
#| eval: !expr params$regate_flowcytometer
#|

## Select all timestamps

# timestamps <- list.files(
#     path = params$extracted_dir,
#     pattern = "^LEEF\\.flowcytometer\\.flowcytometer\\.",
#     recursive = FALSE,
#     full.names = FALSE
# )
# timestamps <- gsub("^LEEF\\.flowcytometer\\.flowcytometer\\.", "", timestamps)
# 
# ## Density
# 
# LEEF_2_density_flowcytometer_archive(
#     extracted_dir = params$extracted_dir,
#     timestamps = timestamps,
#     output = file.path(params$output_dir, "flowcytometer"),
#     use_H = FALSE,
#     gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
#     min_FSC.A = params$min_FSC.A,
#     particles = params$flowcytometer_particles,
#     mc.cores = params$cores
# )
```








### Flowcytometer Traits and Biomass

Note by Uriah (20240229): because of RAM limitations I splitted the following chunk into several chunks based on timestamps.

```{r}
#| label: traits_biomass_flowcytometer_part1
#| eval: !expr params$regate_flowcytometer
#|

timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcytometer\\.flowcytometer\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcytometer\\.flowcytometer\\.", "", timestamps)

## Extract traits and give each bacteria particle a biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[1],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)

# timestamps <- c("20221116","20221207","20230127","20230203","20230215",
#                 "20230320","20230329","20230403","20230505","20230705","20230719")

# timestamps <- c("20230203","20230215",
#                 "20230320","20230505","20230705")

## Extract traits and Biomass
# LEEF_2_extract_traits_flowcytometer_archive(
#     extracted_dir = params$extracted_dir,
#     gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
#     particles = "bacteria",
#     use_H = FALSE,
#     min_FSC.A = params$min_FSC.A,
#     timestamps = timestamps,
#     output = file.path(params$output_dir, "flowcytometer"),
#     length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
#     length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
#     mc.cores = 5
# )
```

```{r}
#| label: traits_biomass_flowcytometer_part2
#| eval: !expr params$regate_flowcytometer
#|

## Extract traits and Biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[21:40],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)
```

```{r}
#| label: traits_biomass_flowcytometer_part3
#| eval: !expr params$regate_flowcytometer
#|

## Extract traits and Biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[41:60],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)
```


```{r}
#| label: traits_biomass_flowcytometer_part4
#| eval: !expr params$regate_flowcytometer
#|

## Extract traits and Biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[61:80],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)
```

```{r}
#| label: traits_biomass_flowcytometer_part5
#| eval: !expr params$regate_flowcytometer
#|

## Extract traits and Biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[81:100],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)
```

```{r}
#| label: traits_biomass_flowcytometer_part6
#| eval: !expr params$regate_flowcytometer
#|

## Extract traits and Biomass
LEEF_2_extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps[101:120],
    output = file.path(params$output_dir, "flowcytometer"),
    length_slope = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$slope,
    length_intercept = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "conv_FSCA_length.csv"))$intercept,
    mc.cores = min(4, params$cores)
)

rm(timestamps)
```


### Flowcytometer calculate the per bottle total density and biomass

```{r}
#| label: density_flowcytometer
#| eval: !expr params$regate_flowcytometer
#|

## Select all timestamps

timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcytometer\\.flowcytometer\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcytometer\\.flowcytometer\\.", "", timestamps)

## Density

LEEF_2_density_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    timestamps = timestamps,
    output = file.path(params$output_dir, "flowcytometer"),
    use_H = FALSE,
    gates_coordinates = read.csv(file.path(parameter_dir, "parameter", "0.raw.data", "flowcytometer", "gates_coordinates.csv")),
    min_FSC.A = params$min_FSC.A,
    particles = params$flowcytometer_particles,
    mc.cores = params$cores
)



```

### Remove bottles not needed in Flowcytometer and Set Individual Missing Samples to NA

```{r}
#| label: flowcytometer_remove_bottles
#| eval: !expr params$regate_flowcytometer
#|#|

fns <- list.files(
    path = file.path(params$output_dir, "flowcytometer"),
    pattern = "flowcytometer",
    recursive = FALSE,
    full.names = TRUE
)

skeleton <- expand.grid(bottle = 1:32,
                        species = c("algae","bacteria"),
                        replicate = 1:3) %>%
            dplyr::mutate(bottle = ifelse(bottle<10,paste0("b_0",bottle),
                                          paste0("b_",bottle)))



# idxs <- c()
# for(ts in timestamps){
# 
# idx <- which(grepl(ts, fns, fixed=T))
# idxs <- c(idxs,idx)
# 
# }
# idxs <- unique(idxs)
# fns <- fns[sort(idxs)]


# idx_error<- c(125, 134, 156, 182, 184, 230, 279, 284, 298, 318, 344)
# timestamp_error <- fns[idx_error]

# idx_error2 <- c(26,27,28,31,32)
# fns_error <- fns[idx_error2]

pbmcapply::pbmclapply(
    fns,
    function(fn) {
      x <- readRDS(fn) |>
        dplyr::filter(!(bottle %in% c(params$remove_bottles_flowcytometer))) %>%
        group_by(bottle, species) |>
        dplyr::mutate(replicate = 1:n())

      if (grepl("_density", fn)) {
        ts <- sub(".*density.", "", fn) 
        ts <- sub(".rds.*", "", ts) 
        skeleton$timestamp = as.numeric(ts)

        x <- x |>
          full_join(skeleton, by = join_by(timestamp, bottle, species, replicate)) |>
          dplyr::select(-replicate) |>
          arrange(bottle, plate, species)
      }

      unlink(fn)
      saveRDS(x, file = fn)
    },
    mc.cores = params$cores,
    mc.preschedule = FALSE
)
```

### 


## Assemble TOC
```{r}
#| label: assemble_toc_detrended
#| eval: !expr params$assemble_toc
#|

tp <- file.path(params$output_dir, "toc")
dir.create(tp, showWarnings = FALSE, recursive = TRUE)

toc <- readRDS(params$toc)

#### detrending begin

colnames_toc <- colnames(toc)
exp_des <- read.csv(file.path(parameter_dir, "parameter", "00.general.parameter", "experimental_design.csv"))
toc <- full_join(
    toc,
    exp_des,
    by = "bottle"
)

toc$day <- as.Date(as.character(toc$timestamp), "%Y%m%d") - min(as.Date(as.character(toc$timestamp), "%Y%m%d"))
toc$day <- as.numeric(toc$day)

toc$analysis_time2 <- as_datetime(toc$anaysis_time, format = "%Y-%m-%d %H:%M") # wrong time zones, but doesnt matter
toc$analysis_time2 <- sapply(toc$analysis_time2, function(d) {
    paste0(unlist(strsplit(as.character(d), "-")), collapse = "")
})

toc <- toc %>%
    dplyr::mutate(
        experiment_phase = case_when(
            temperature == "constant" ~ "constant",
            day < 70 ~ "constant before increase",
            day >= 70 & day < 154 ~ "increasing",
            day >= 154 ~ "constant after increase"
        ),
        int = interaction(analysis_time2, experiment_phase)
    ) %>%
    arrange(timestamp)

toc_list <- split(toc,
    f = toc$int,
    drop = T
)

toc_list <- mclapply(
    toc_list,
    function(df) {
        if (nrow(df) < 3 * 4) { # at least 3 bottles per type to do the detrending
            df$concentration.detrended <- df$conc
            return(df)
        }

        df <- lapply(c("IC", "TC", "TN", "TOC"), function(Type) {
            df2 <- df %>% dplyr::filter(inj_type == Type)
            m <- lm(conc ~ position, data = df2)
            predict <- predict(m) - predict(m)[1]
            df2$concentration.detrended <- df2$conc - predict
            df2
        })

        do.call("rbind", df)
    },
    mc.cores = params$cores
)

toc <- do.call("rbind", toc_list)

toc_before_after <- toc

toc <- toc %>%
    dplyr::mutate(conc = concentration.detrended) %>%
    select(all_of(colnames_toc))

#### detrending end

saveRDS(toc, file = file.path(tp, basename(params$toc)))

```

## Assemble O2 and remove duplicate measurements

In some cases, O_2 was measured twice for the same sensor. We remove the duplicates here by randomly choosing one of the duplicate measurements.

```{r}
#| label: assemble_o2
#| eval: !expr params$assemble_o2
#|
fns_o2 <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.o2meter\\.o2meter\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("o2meter.csv")

dp <- file.path(params$output_dir, "o2meter")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

fns_to <- file.path(
    dp,
    paste0(
        fns_o2 |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.o2meter.o2meter."), replacement = "") |>
            gsub(pattern = "/o2meter.csv", replacement = ""),
        ".rds"
    )
)

i <- 1
repeat {
    template <- read.csv(fns_o2[i]) |>
        mutate(Temp = as.double(Temp)) |>
        group_by(SensorID) |>
        slice_sample(n = 1) |>
        ungroup()
    if (nrow(template) == 64) {
        template[1, c(4:5, 9:55)] <- NA
        template[2:64, c(4:5, 9:55)] <- NA
        break
    }
}

for (i in 1:length(fns_o2)) {
    dat <- fns_o2[i] |>
        read.csv() |>
        mutate(Temp = as.double(Temp)) |>
        group_by(SensorID) |>
        slice_sample(n = 1) |>
        ungroup()
    if (nrow(dat) <= 64) {
        missing <- !(template$SensorID %in% dat$SensorID)

        dat <- bind_rows(
            dat,
            template[missing, ] |>
                mutate(
                    timestamp = unique(dat$timestamp),
                )
        )
    }
    saveRDS(dat, file = fns_to[i])
}

rm(dp, fns_o2)
```

## Assemble Conductivity
```{r}
#| label: assemble_conductivity
#| eval: !expr params$assemble_conductivity
#|

from <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.conductivity\\.conductivity\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("conductivity.csv")

dp <- file.path(params$output_dir, "conductivity")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

to <- file.path(
    dp,
    paste0(
        from |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.conductivity.conductivity."), replacement = "") |>
            gsub(pattern = "/conductivity.csv", replacement = ""),
        ".csv"
    )
)

file.copy(from = from, to = to)

rm(dp, from, to)
```


## Assemble manualcount
```{r}
#| label: assemble_manualcount
#| eval: !expr params$assemble_manualcount
#|

fns_mc <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.manualcount\\.manualcount\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("manualcount_density.csv")

dp <- file.path(params$output_dir, "manualcount")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

fns_to <- file.path(
    dp,
    paste0(
        "manualcount.",
        fns_mc |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.manualcount.manualcount."), replacement = "") |>
            gsub(pattern = "/manualcount_density.csv", replacement = ""),
        ".csv"
    )
)

for (i in 1:length(fns_mc)) {
    read.csv(fns_mc[i]) |>
        select(1:6) |>
        rename(density = 6) |>
        write.csv(file = fns_to[i], row.names = FALSE)
}


rm(dp, fns_mc, fns_to)
```

### Fill missing data points
```{r}
#| label: manualcount_fill_missing
#| eval: !expr params$assemble_manualcount
#|

fns <- list.files(
    path = file.path(params$output_dir, "manualcount"),
    pattern = "manualcount",
    recursive = FALSE,
    full.names = TRUE
)

template <- grep(pattern = "20221107", fns, value = TRUE) |>
    read.csv()
template$ml_counted[1] <- NA
template$ml_counted[2:32] <- NA
template$count[1] <- NA
template$count[2:32] <- NA
template$density[1] <- NA
template$density[2:32] <- NA

missing <- paste0(file.path(params$output_dir, "manualcount", "manualcount."), exp_timestamps, ".csv")
missing <- missing[!(missing %in% fns)]

for (fn in missing) {
    ts <- strsplit(fn, "\\.")[[1]] |>
        tail(2) |>
        head(1)

    template |>
        mutate(timestamp = ts) |>
        write.csv(file = fn, row.names = FALSE)
}
```

# Create parquet

```{r}
#| label: create_parquet
#| eval: true
#|
dir.create(parquet_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(parquet_dir_renamed, showWarnings = FALSE, recursive = TRUE)
```

```{r}
#| label: add_bemovi_mag_16
#| eval: !expr params$update_parquet_bemovi_16
#|

## bemovi mag 16
fns <- list.files(
    file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "\\.rds$",
    full.names = TRUE
)
parquet_add_bemovi_16(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_bemovi_16(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)

```

```{r}
#| label: add_bemovi_mag_25
#| eval: !expr params$update_parquet_bemovi_25
#|

## bemovi mag 25
fns <- list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE, invert = TRUE)

parquet_add_bemovi_25(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_bemovi_25(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)

fns <- list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE)

parquet_add_bemovi_25_cropped(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_bemovi_25_cropped(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)
```

```{r}
#| label: add_flowcam
#| eval: !expr params$update_parquet_flowcam
#|

## flowcam
fns <- list.files(
    file.path(params$output_dir, "flowcam"),
    pattern = "\\.rds$",
    full.names = TRUE
) |> sample()

parquet_add_flowcam(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_flowcam(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)
```

## Add flowcytometer

```{r}
#| label: add_flowcytometer
#| eval: !expr params$update_parquet_flowcytometer
#|

## flowcytometer

fns <- list.files(
    file.path(params$output_dir, "flowcytometer"),
    pattern = "\\.rds$",
    full.names = TRUE
)
parquet_add_flowcytometer(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE, compression = "brotli")
parquet_add_flowcytometer(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE, compression = "brotli")
```



```{r}
#| label: add_manualcount
#| eval: !expr params$update_parquet_manualcount
#|

## manualcount
fns <- list.files(
    path = file.path(params$output_dir, "manualcount"),
    recursive = FALSE,
    full.names = TRUE
)
parquet_add_manualcount(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_manualcount(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)
```

```{r}
#| label: add_toc
#| eval: !expr params$update_parquet_toc
#|

## toc
parquet_add_toc(
    fn = file.path(params$output_dir, "toc", "toc.rds"),
    path_to_parquet_root_dir = parquet_dir,
    rename = FALSE
)
parquet_add_toc(
    fn = file.path(params$output_dir, "toc", "toc.rds"),
    path_to_parquet_root_dir = parquet_dir_renamed,
    rename = TRUE
)


```

```{r}
#| label: add_o2meter
#| eval: !expr params$update_parquet_o2
#|

## o2meter
fns <- list.files(
    path = file.path(params$output_dir, "o2meter"),
    recursive = FALSE,
    full.names = TRUE
)
parquet_add_o2(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_o2(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = TRUE)
```

```{r}
#| label: add_conductivity
#| eval: !expr params$update_parquet_conductivity
#|

## conductivity
fns <- list.files(
    path = file.path(params$output_dir, "conductivity"),
    recursive = FALSE,
    full.names = TRUE
)
parquet_add_conductivity(fns = fns, path_to_parquet_root_dir = parquet_dir, rename = FALSE)
parquet_add_conductivity(fns = fns, path_to_parquet_root_dir = parquet_dir_renamed, rename = FALSE)
```

```{r}
#| label: add_experimental_tables
#| eval: !expr params$update_parquet_experimental_tables
#|

## experimental tables

### Composition

object <- read.csv(file.path(parameter_dir, "parameter", "00.general.parameter", "compositions.csv"))

path_to_parquet <- file.path(parquet_dir, "composition", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = path_to_parquet)

#### Rename

object <- LEEF_2_rename_composition(object)

path_to_parquet <- file.path(parquet_dir_renamed, "composition", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = file.path(parquet_dir_renamed, "composition"))

### Experimental Design

object <- read.csv(file.path(parameter_dir, "parameter", "00.general.parameter", "experimental_design.csv"))

path_to_parquet <- file.path(parquet_dir, "experimental_design", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = path_to_parquet)

#### Rename

path_to_parquet <- file.path(parquet_dir_renamed, "experimental_design", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = path_to_parquet)

### Stressor Levels

object <- read.csv(file.path(parameter_dir, "treatment", "stressor_levels.csv"))

path_to_parquet <- file.path(parquet_dir, "stressor_levels", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = path_to_parquet)

#### Rename

path_to_parquet <- file.path(parquet_dir_renamed, "stressor_levels", "")
unlink(path_to_parquet, recursive = TRUE, force = TRUE)
dir.create(path_to_parquet, recursive = TRUE, showWarnings = FALSE)
object_to_parquet(object = object, path_to_parquet = path_to_parquet)
```


The Diagnostic report can be created manually by running:

```{r}
#| label: createDiagReport
#| eval: false
#|
options(knitr.duplicate.label = "allow")

LEEF_2_report_diagnostic(
    lastDays = 300,
    suffix = paste0("LEEF-2_reclassified_", params$release, "_", tag),
    format = "html",
    arrow = TRUE,
    parquet_dir = parquet_dir
)
```

