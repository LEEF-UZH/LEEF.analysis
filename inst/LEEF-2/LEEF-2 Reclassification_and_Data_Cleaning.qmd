---
title: "Reclassification and Data Cleaning of LEEF-2 data"
author: "Rainer M Krug"

format:
  html:
    dev: png
    fig_width: 10
    fig_height: 12
    toc: true
    toc_float: true
    toc_collapsed: true
    code_folding: hide  
    embed-resources: true
params:
  release: "2.3.6-LEEF-2"
  repo: "https://github.com/LEEF-UZH/LEEF.parameter/"
  output_dir: "/Volumes/RRD.Reclassification_LEEF-2/"
  db: "LEEF-2.RRD.sqlite"
  extracted_dir: "/Volumes/LEEF-2_archive/archive/extracted/"
  toc: "/Volumes/LEEF/0.TOC/LEEF-2/toc.rds"
  min_FSC.A: 2
  flowcytometer_particles: 
    - algae
    - bacteria
  cores: 7
  remove_all:
    - airbubbles
    - OtherCiliate
    - Debris_and_other
    - Cryptomonas
  remove_flowcam:
    - Dexiostoma
    - Coleps_irchel
    - Colpidium
    - Loxocephallus
    - Tetrahymena
  keep_flowcytometer:
    - bacteria
    - algae
  bemovi_mag_16_moving_background: ~
  bemovi_mag_25_moving_background: ~
  reclassify_flowcam: false
  reclassify_bemovi_16: false
  reclassify_bemovi_25: false
  regate_flowcytometer: false
  assemble_toc: false
  assemble_o2: false
  assemble_manualcount: false
  add_to_rrd: false
  rename_rrd: false
  final_rrd: false
  diagnostic_report: false
  parquet: true
---

TODO: Chek for errors in pipeline and re-run these

# Setup
1. Download parameter as defined in the `params$version_tag` from the repo as defined in `parms$base` 
2. Create output directory as specified in `params$output_dir`
3. Check if `params$pre_processed_dir` and `params$extracted_dir` exist. The existance is only necessary for the re-classification and overlay creation (when done).
4. Create empty database `params$db` in directory `params$output_dir` database, unless it already exists


```{r}
#| label: setup
#| include: false
#|
if (!exists("params")) {
    params <- rmarkdown::yaml_front_matter("~/git/0.RPackages/LEEF/analysis/LEEF.analysis/inst/LEEF-2/LEEF-2 Reclassification_and_Data_Cleaning.qmd")$params
}

knitr::opts_chunk$set(
    echo = TRUE,
    eval = FALSE,
    message = TRUE,
    warning = TRUE
)

library("LEEF.analysis")
library(dplyr)
library(pbmcapply)
library(pbapply)
library(yaml)
library(tidyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(tictoc)

db <- function(
    iteration = NULL,
    db_org = params$db,
    db_path = params$output_dir,
    version_tag = params$version_tag,
    temp = FALSE) {
    if (!is.null(iteration)) {
        db_name <- gsub(
            pattern = ".sqlite",
            replacement = paste0(".", version_tag, "_", iteration, ".sqlite"),
            x = db_org
        )
    } else {
        db_name <- db_org
    }
    if (temp) {
        db_name <- paste0(db_name, ".tmp")
    }
    return(file.path(db_path, db_name))
}

## 1. ------

pdir <- tempfile(pattern = paste0("parameter_", params$release))

dir.create(pdir, showWarnings = FALSE, recursive = TRUE)

on.exit({
    try(unlink(pdir), silent = TRUE)
})

download.file(
    url = paste0(params$repo, "archive/refs/tags/", params$release, ".zip"),
    destfile = file.path(pdir, paste0(params$release, ".zip")),
    mode = "wb"
)

unzip(file.path(pdir, paste0(params$release, ".zip")), exdir = pdir)

parameter_dir <- list.dirs(pdir, recursive = FALSE)

## 2. -----
dir.create(params$output_dir, recursive = TRUE, showWarnings = FALSE)

## 3. -----

if (!file.exists(params$extracted_dir)) {
    warning(
        "This is not a problem when not reclassifying! \n",
        "Archive directory is not valid! \n",
        "It does not contain the folder '", params$extracted_dir, "'.\n",
        "Probably not mounted?"
    )
}

# ## 4. -----

# if (file.exists(db())) {
#     warning(
#         db(), " exists and will not be overwritten!\n",
#         "If you want to re-generate, please rename the database or delete it!\n",
#         "\n",
#         "All processes using / modifying the RRD are disabled!\n"
#     )
#     unlockBinding("params", env = .GlobalEnv)
#     params$add_to_rrd <- FALSE
#     params$rename_rrd <- FALSE
#     params$final_rrd <- FALSE
#     params$diagnostic_report <- FALSE
#     lockBinding("params", env = .GlobalEnv)
# } else {
#     RRD_new(db(), LEEF = "LEEF-2")
#     ## Adding of General Parameter tables

#     suppressMessages(
#         add_to_db(
#             fns = file.path(parameter_dir, "parameter", "00.general.parameter", "compositions.csv"),
#             db = db(),
#             tables = "composition",
#             remove_timestamps = NULL,
#             check_timestamps = FALSE,
#             backup_removed = TRUE
#         )
#     )

#     suppressMessages(
#         add_to_db(
#             fns = file.path(parameter_dir, "parameter", "00.general.parameter", "experimental_design.csv"),
#             db = db(),
#             tables = "experimental_design",
#             remove_timestamps = NULL,
#             check_timestamps = FALSE,
#             backup_removed = TRUE
#         )
#     )

#     suppressMessages(
#         add_to_db(
#             fns = file.path(parameter_dir, "treatment", "stressor_levels.csv"),
#             db = db(),
#             tables = "stressor_levels",
#             remove_timestamps = NULL,
#             check_timestamps = FALSE,
#             backup_removed = TRUE
#         )
#     )
# }
```

# 1. Re-calculations for all timestamps
## Reclassification of Flowcam


### Classify Flowcam
```{r}
#| label: flowcam_classify
#| eval: !expr params$reclassify_flowcam
#| 
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcam\\.flowcam\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcam\\.flowcam\\.", "", timestamps)

out <- file.path(params$output_dir, "flowcam")

if (!file.exists(out)) {
    message("Classifying flowcam...")
    tic()
    LEEF_2_classify_flowcam_archive(
        extracted_dir = params$extracted_dir,
        timestamps = timestamps,
        algae_traits_name = "algae_traits_filtered.rds",
        classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "svm_flowcam_classifiers.rds")),
        species_tracked = yaml::read_yaml(file.path(parameter_dir, "parameter", "0.raw.data", "flowcam", "flowcam.yml"))$species_tracked,
        output = out,
        mc.cores = params$cores
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "skipping Flowcam classification."
    )
}

rm(timestamps)
```




### Calculate Biomass Flowcam
The biomass is calculated here

```{r}
#| label: flowcam_biomass
#| eval: !expr params$reclassify_flowcam

# #| eval: !expr params$#| reclassify_flowcam

fns <- list.files(
  path = file.path(params$output_dir, "flowcam"), 
  pattern = "algae_traits",
  recursive = FALSE,
  full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "algae_traits", 
        replacement = "algae_density"
      )
    biomass_flowcam <- LEEF_2_biomass_flowcam(
      algae_traits = readRDS(fn_traits),
      algae_density = readRDS(fn_dens)
    )
    
    saveRDS(biomass_flowcam$traits, file = fn_traits)
    saveRDS(biomass_flowcam$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)
toc()
```


## Reclassification of Bemovi 16


### Classify `bemovi_extract.mag.16.yml`
```{r}
#| label: bemovi_16_classify
#| eval: !expr params$reclassify_bemovi_16
#| 
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.", "", timestamps)

out <- file.path(params$output_dir, "bemovi_mag_16")

if (!file.exists(out)) {
    message("Classifying bemovi_extract.mag.16")
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 16,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "svm_video_classifiers_16x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.16", "bemovi_extract.mag.16.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_16_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, " exists\n",
        "Skipping bemovi_extract.mag.16 classification."
    )
}

rm(timestamps)
```



### Calculate Biomass Bemovi 16
The biomass is calculated here

```{r}
#| label: bemovi_16_biomass
#| eval: !expr params$reclassify_bemovi_16
#|

fns <- list.files(
    path = file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "morph_mvt",
    recursive = FALSE,
    full.names = TRUE
)

tic()

pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_16 <- LEEF_2_biomass_bemovi_16(
            ciliate_traits_16 = traits,
            ciliate_density_16 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_16$traits, file = fn_traits)
        saveRDS(biomass_bemovi_16$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = 1 # when using more, some timestamps were not there... was: params$cores
)

toc()
```


## Reclassification of Bemovi 25

### Classify `bemovi_mag.25` excluding moving_background

```{r}
#| label: bemovi_25_classify
#| eval: !expr params$reclassify_bemovi_25
#| 
timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.", "", timestamps)

out <- file.path(params$output_dir, "bemovi_mag_25")
if (!file.exists(out)) {
    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = 1 #params$cores
        )
    )
    toc()

    tic()
    suppressMessages(
        LEEF_2_classify_bemovi_archive(
            timestamps = timestamps,
            extracted_dir = params$extracted_dir,
            magnification = 25,
            classifier = readRDS(file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "svm_video_classifiers_25x.rds")),
            bemovi_extract_name = file.path(parameter_dir, "parameter", "0.raw.data", "bemovi.mag.25", "bemovi_extract.mag.25.cropped.yml"),
            output = out,
            exclude_videos = params$bemovi_mag_25_moving_background,
            mc.cores = params$cores
        )
    )
    toc()
} else {
    message(
        "Directory ", out, "exists\n",
        "Skipping all bemovi_mag_25 classifcations"
    )
}

rm(timestamps)
```



### Calculate Biomass Bemovi 25
The biomass is calculated here

```{r}
#| label: bemovi_25_biomass
#| eval: false
#| 

# #| eval: !expr params$reclassify_bemovi_25

## Bemovi 25

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_25"), 
  pattern = "morph_mvt\\.",
  recursive = FALSE,
  full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25(
            ciliate_traits_25 = traits,
            ciliate_density_25 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_25$traits, file = fn_traits)
        saveRDS(biomass_bemovi_25$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()

## Bemovi 25 cropped

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_25"), 
  pattern = "morph_mvt_cropped\\.",
  recursive = FALSE,
  full.names = TRUE
)

tic()
pbmcapply::pbmclapply(
    fns,
    function(fn_traits) {
        fn_dens <- fn_traits |>
            gsub(
                pattern = "morph_mvt",
                replacement = "mean_density_per_ml"
            )

        timestamp <- substr(
            fn_traits,
            start = nchar(fn_traits) - 11,
            stop = nchar(fn_traits) - 4
        ) |>
            as.numeric()

        traits <- readRDS(fn_traits) |>
            mutate(timestamp = timestamp)

        biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25_cropped(
            ciliate_traits_25 = traits,
            ciliate_density_25 = readRDS(fn_dens)
        )

        saveRDS(biomass_bemovi_25$traits, file = fn_traits)
        saveRDS(biomass_bemovi_25$density, file = fn_dens)
    },
    mc.preschedule = FALSE,
    mc.cores = params$cores
)
toc()
```


## TODO Regate Flowcytometer

Not implemented yet - needs a bit of thinking.
```{r}
#| label: regate_flowcytometer
#| eval: false
#|

## Select all timestamps

timestamps <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.flowcytometer\\.flowcytometer\\.",
    recursive = FALSE,
    full.names = FALSE
)
timestamps <- gsub("^LEEF\\.flowcytometer\\.flowcytometer\\.", "", timestamps)

## Density

LEEF_2_density_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    timestamps = timestamps,
    output = file.path(params$output_dir, "flowcytometer"),
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    particles = params$flowcytometer_particles,
    mc.cores = 1 #params$cores
)

## Biomass
# TODO possibly can stay
biomass_per_bottle <- extract_traits_flowcytometer_archive(
    extracted_dir = params$extracted_dir,
    gates_coordinates = read.csv(gates_coordinates),
    particles = params$flowcytometer_particles,
    use_H = FALSE,
    min_FSC.A = params$min_FSC.A,
    timestamps = timestamps,
    output = file.path(params$output_dir, "flowcytometer_traits"),
    length_slope = read.csv(conv_FSCA_length)$slope,
    length_intercept = read.csv(conv_FSCA_length)$intercept,
    mc.cores = params$cores
)

## Add biomass to density

pbmcapply::pbmclapply(
    names(biomass_per_bottle),
    function(timestamp) {
        dens_fn <- file.path(params$output_dir, "flowcytometer", paste0("flowcytometer_density.", timestamp, ".rds"))
        merge(
            readRDS(dens_fn),
            biomass_per_bottle[[timestamp]],
            by = c("sample", "species")
        ) |>
            saveRDS(file = dens_fn)
    }
)

rm(gates_coordinates, metadata_flowcytometer, gates_coordinates_EAWAG_samples, conv_FSCA_length)
```

## Assemble TOC
```{r}
#| label: assemble_toc_detrended
#| eval: !expr params$assemble_toc
#|

tp <- file.path(params$output_dir, "toc")
dir.create(tp, showWarnings = FALSE, recursive = TRUE)

file.copy(
    from = params$toc,
    to = file.path(tp, basename(params$toc))
)

rm(tp)
```

## Assemble O2
```{r}
#| label: assemble_o2
#| eval: !expr params$assemble_o2
#|

fns_o2 <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.o2meter\\.o2meter\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("o2meter.csv")

dp <- file.path(params$output_dir, "o2meter")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

file.path(
    dp,
    paste0(
        fns_o2 |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.o2meter.o2meter."), replacement = "") |>
            gsub(pattern = "/o2meter.csv", replacement = ""),
        ".csv"
    )
) |>
    file.copy(from = fns_o2)

rm(dp, fns_o2)
```


## Assemble manualcount
```{r}
#| label: assemble_manualcount
#| eval: !expr params$assemble_manualcount
#|

fns_mc <- list.files(
    path = params$extracted_dir,
    pattern = "^LEEF\\.manualcount\\.manualcount\\.",
    recursive = FALSE,
    full.names = TRUE
) |>
    file.path("manualcount_density.csv")

dp <- file.path(params$output_dir, "manualcount")
dir.create(dp, showWarnings = FALSE, recursive = TRUE)

file.path(
    dp,
    paste0(
        "manualcount.",
        fns_mc |>
            gsub(pattern = file.path(params$extracted_dir, "LEEF.manualcount.manualcount."), replacement = "") |>
            gsub(pattern = "/manualcount_density.csv", replacement = ""),
        ".csv"
    )
) |>
    file.copy(from = fns_mc)

rm(dp, fns_mc)
```







# 1 Add to database and create indices
Old timestamps will be removed and not be backed up.

```{r}
#| label: addRRD_copy_temp
#| eval: !expr params$add_to_rrd
#| 

file.copy(db(), db(1, temp = TRUE))
```
```{r}
#| label: addRRD_b16
#| eval: !expr params$add_to_rrd
#| 

## Bemovi_16

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "bemovi_mag_16"
  )
)
```
```{r}
#| label: addRRD_b25
#| eval: !expr params$add_to_rrd
#| 

## Bemovi_25

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "bemovi_mag_25"
  )
)
```
```{r}
#| label: addRRD_flowcam
#| eval: !expr params$add_to_rrd
#| 

## flowcam

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "flowcam"
  )
)
```

```{r}
#| label: addRRD_flowcytometer_density
#| eval: !expr params$add_to_rrd
#| 

## Flowcytometer Densities

f_dirs <- list.dirs(
    params$extracted_dir,
    recursive = FALSE,
    full.names = TRUE
) |>
    grep(pattern = "LEEF\\.flowcytometer\\.flowcytometer\\.", value = TRUE)

fns_dens <- file.path(f_dirs, "flowcytometer_density.csv")


suppressMessages(
  add_to_db(
    fns_dens,
    db = db_name(1, temp = TRUE),
    tables = rep("flowcytometer__flowcytometer_density", length(fns_dens)),
    remove_timestamps = NULL,
    check_timestamps = FALSE,
    backup_removed = TRUE
  )
)

rm(f_dirs, fns_dens)
```
```{r}
#| label:  addRRD_flowcytometer_traits
#| eval: !expr params$add_to_rrd
#| 

## Flowcytometer Traits

f_dirs <- list.dirs(
    params$extracted_dir,
    recursive = FALSE,
    full.names = TRUE
) |>
    grep(pattern = "LEEF\\.flowcytometer\\.flowcytometer\\.", value = TRUE)

fn_traits <- c(
    file.path(f_dirs, "flowcytometer_traits_algae.rds"),
    file.path(f_dirs, "flowcytometer_traits_bacteria.rds")
)

suppressMessages(
  add_to_db(
    fns_traits,
    db = db_name(1, temp = TRUE),
    tables = rep("flowcytometer__flowcytometer_traits", length(fns_traits)),
    remove_timestamps = NULL,
    check_timestamps = FALSE,
    backup_removed = TRUE
  )
)

rm(f_dirs, fn_traits)
```
```{r}
#| label: add_toc_detrended
#| eval: !expr params$add_to_rrd
#|

tp <- file.path(params$output_dir, "toc")
toc_det <- file.path(tp, "toc_detrended.rds")

add_to_db(
    toc_det,
    db = db_name(1, temp = TRUE),
    tables = "toc__toc",
    remove_timestamps = NULL,
    check_timestamps = TRUE,
    backup_removed = TRUE
)

rm(toc_det, tp)
```

```{r}
#| label: add_o2
#| eval: !expr params$add_to_rrd
#|

fns_o2 <- list.files(
  path = file.path(params$output_dir, "o2meter"), 
  pattern = "^LEEF\\.fast\\.o2meter\\.",
  recursive = FALSE, 
  full.names = TRUE
)

suppressMessages(
  add_to_db(
    fns_o2,
    db = db_name(1, temp = TRUE),
    tables = rep("o2meter__o2meter", length(fns_o2)),
    remove_timestamps = NULL,
    check_timestamps = TRUE,
    backup_removed = TRUE
  )
)
```


```{r}
#| label: add_manualcount
#| eval: !expr params$add_to_rrd
#|

fns_mc <- list.files(
  path = file.path(params$output_dir, "manualcount"), 
  pattern = "^LEEF\\.fast\\.manualcount\\.",
  recursive = FALSE, 
  full.names = TRUE
)

suppressMessages(
  add_to_db(
    fns_mc,
    db = db_name(1, temp = TRUE),
    tables = rep("manualcount__manualcount_density", length(fns_mc)),
    remove_timestamps = NULL,
    check_timestamps = TRUE,
    backup_removed = TRUE
  )
)
```
```{r}
#| label: addRRD_add_indices
#| eval: !expr params$add_to_rrd
#|

RRD_create_indices(
    db_name(1, temp = TRUE),
    LEEF = "LEEF-1",
    continue_after_error = TRUE
)

```

```{r}
#| label: addRRD_finalize
#| eval: !expr params$add_to_rrd
#|

file.rename(db_name(1, temp = TRUE), db_name(1, temp = FALSE))
```



# TODO Create Diagnostic Report
The Diagnostic report needs to be created before the renaming as it does rely on the otriginal terminology.

```{r}
#| label: createDiagReport
#| eval: !expr params$diagnostic_report
#| 

report_diagnostic(
  db = db_name(1, temp = FALSE),  
  template = "LEEF_1",
  suffix = paste0("reclassified_", params$version_tag), 
  format = "html"
)
```


# TODO 2. Rename species and columns
```{r}
#| label: rename
#| eval: !expr params$rename_rrd
#|

file.copy(db_name(1, temp = FALSE), db_name(2, temp = TRUE))

RRD_LEEF_1_rename(db = db_name(2, temp = TRUE))

file.rename(db_name(2, temp = TRUE), db_name(3, temp = FALSE))
```

```{r}
#| label: create final db
#| eval: !expr params$final_rrd
#|

file.copy(db_name(4, temp = FALSE), db_name("final", temp = FALSE))
```

# TODO Do a final vacuuming into new database
Vacuuming the database will take some time!

To vacuum the sqlite database, i.e. recover the space from the deletion of rows, please run the following command in the directory where the database is located. I do not expect this to have a big impact on the size.

```{r echo = FALSE}
cat(
  paste0(
    "sqlite3 \"./", basename(db_name("final", temp = FALSE)), "\" 'VACUUM main INTO \"", db_name("final_vacuumed", temp = FALSE), "\"'"
    )
)
```

# TODO Create Overlays
TODO This is still using the extracted and pre-processed folder and needs to be changed to use the reclassified bemovi data. 
```{r}
#| label: overlays
#| eval: false

generate_overlays(
  params = params,
  overwrite = FALSE
)
```



# Create parquet
This is experimental. The main storage is still the RRD sqlite database.

```{r}
#| label: create_parquet
#| eval: !expr params$parquet
###
tic()
###

pd <- file.path(params$output_dir, "parquet")
unlink(pd, recursive = TRUE, force = TRUE)
dir.create(pd, showWarnings = FALSE, recursive = TRUE)

## bemovi mag 16
list.files(
    file.path(params$output_dir, "bemovi_mag_16"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    LEEF.analysis:::parquet_add_bemovi_16(path_to_parquet_root_dir = pd)

## bemovi mag 25
list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE, invert = TRUE) |>
    LEEF.analysis:::parquet_add_bemovi_25(path_to_parquet_root_dir = pd)

## bemovi mag 25 cropped
list.files(
    file.path(params$output_dir, "bemovi_mag_25"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    grep(pattern = "_cropped\\.", value = TRUE) |>
    LEEF.analysis:::parquet_add_bemovi_25_cropped(path_to_parquet_root_dir = pd)


## flowcam
list.files(
    file.path(params$output_dir, "flowcam"),
    pattern = "\\.rds$",
    full.names = TRUE
) |>
    LEEF.analysis:::parquet_add_flowcam(path_to_parquet_root_dir = pd)

## flowcytometer
c(
    list.files(
        file.path(params$output_dir, "flowcytometer"),
        pattern = "\\.rds$",
        full.names = TRUE
    ),
    list.files(
        file.path(params$output_dir, "flowcytometer_traits"),
        pattern = "\\.rds$",
        full.names = TRUE
    )
) |>
    LEEF.analysis:::parquet_add_flowcytometer(path_to_parquet_root_dir = pd)

## toc
LEEF.analysis:::parquet_add_toc(
    fn = file.path(params$output_dir, "toc", "toc.rds"),
    path_to_parquet_root_dir = pd
)

## o2meter
list.files(
    path = file.path(params$output_dir, "o2meter"),
    recursive = FALSE,
    full.names = TRUE
) |>
    LEEF.analysis:::parquet_add_o2(path_to_parquet_root_dir = pd)

## manualcount
list.files(
    path = file.path(params$output_dir, "manualcount"),
    recursive = FALSE,
    full.names = TRUE
) |>
    LEEF.analysis:::parquet_add_manualcount(path_to_parquet_root_dir = pd)

###
toc()
###
```