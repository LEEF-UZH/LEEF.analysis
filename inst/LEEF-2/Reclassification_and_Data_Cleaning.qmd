---
title: "Reclassification and Data Cleaning of LEEF-2 data"
author: "Rainer M Krug"

format:
  html:
    dev: png
    fig_width: 10
    fig_height: 12
    toc: true
    toc_float: true
    toc_collapsed: true
    code_folding: hide  
    embed-resources: true
params:
  release: "v2.3.1-LEEF-2"
  repo: "https://github.com/LEEF-UZH/LEEF.parameter/"
  output_dir: "~/RRD.Reclassification_final_LEEF-2/"
  db: "/LEEF-2.RRD.sqlite"
  pre_processed_dir: "/Volumes/LEEF-1_archive/LEEF.archived.data/LEEF/3.archived.data/pre_processed/"
  extracted_dir: "/Volumes/LEEF-1_archive/LEEF.archived.data/LEEF/3.archived.data/extracted/"
  toc: "/Volumes/LEEF/0.TOC/LEEF-1/toc.rds"
  min_FSC.A: 2
  cores: 7
  remove_all:
    - airbubbles
    - OtherCiliate
    - Debris_and_other
    - Cryptomonas
  remove_flowcam:
    - Dexiostoma
    - Coleps_irchel
    - Colpidium
    - Loxocephallus
    - Tetrahymena
  keep_flowcytometer:
    - bacteria
    - algae
---

# Setup
1. Download parameter as defined in the `params$version_tag` from the repo as defined in `parms$base` 
2. Create output directory as specified in `params$output_dir`
3. Check if `params$pre_processed_dir` and `params$extracted_dir` exist. The existance is only necessary for the re-classification and overlay creation (when done).
4. Create empty database `params$db` in directory `params$output_dir` database, unless it already exists


```{r}
#| label: setup
#| include: false 
#| 

knitr::opts_chunk$set(
  echo = TRUE,
  eval = FALSE,
  message = TRUE,
  warning = TRUE
)

library("LEEF.analysis")
library(dplyr)
library(pbmcapply)
library(pbapply)
library(yaml)
library(tidyr)
library(DBI)
library(RSQLite)
library(lubridate)

db <- function(
    iteration = NULL,
    db_org = params$db,
    db_path = params$output_dir,
    version_tag = params$version_tag,
    temp = FALSE
){
  if (!is.null(iteration)){
    db_name <- gsub(
      pattern = ".sqlite", 
      replacement = paste0(".", version_tag, "_", iteration, ".sqlite"), 
      x = db_org
    )
  } else {
    db_name <- db_org
  }
  if (temp){
    db_name <- paste0(db_name, ".tmp")
  }
  return(file.path(db_path, db_name))
}

## 1. ------

pdir <- tempfile(pattern = paste0("parameter_", params$release))

dir.create(pdir, showWarnings = FALSE, recursive = TRUE)

on.exit({
  try(unlink(pdir), silent = TRUE)
})

download.file(
  url = paste0(params$repo, "archive/refs/tags/", params$release, ".zip"), 
  destfile = file.path(pdir, paste0(params$release, ".zip")),
  mode = "wb"
)

unzip(file.path(pdir, paste0(params$release, ".zip")), exdir = pdir)

parameter_dir <- list.dirs(pdir, recursive = FALSE)
  
## 2. -----
dir.create(params$output_dir, recursive = TRUE, showWarnings = FALSE)

## 3. -----

if (!file.exists(params$pre_processed_dir)){
  warning(
    "This is not a problem when not reclassifying! \n",
    "Archive directory '", params$archive_dir, "' does not exist!\n",
    "Probably not mounted?" 
  )
}
if (!file.exists(params$extracted_dir)){
  warning(
    "This is not a problem when not reclassifying! \n",
    "Archive directory is not valid! \n",
    "It does not contain the folder '", params$extracted_dir, "'.\n",
    "Probably not mounted?" 
  )
}

## 4. -----

if (file.exists(db())) {
  stop(db(), " exists and will not be overwritten!\n", "If you want to re-generate, please rename the database or delete it!")
} else {
  RRD_new(db(), LEEF = "LEEF-2")
  ## Adding of General Parameter tables
  
  suppressMessages(  
    add_to_db(
      fns = file.path(parameter_dir, "parameter", "00.general.parameter", "compositions.csv"),
      db = db(),
      tables = "composition",
      remove_timestamps = NULL,
      check_timestamps = FALSE,
      backup_removed = TRUE
    )
  )
  
  suppressMessages(  
    add_to_db(
      fns = file.path(parameter_dir, "parameter", "00.general.parameter", "experimental_design.csv"),
      db = db(),
      tables = "experimental_design",
      remove_timestamps = NULL,
      check_timestamps = FALSE,
      backup_removed = TRUE
    )
  )
  
  suppressMessages(  
    add_to_db(
      fns = file.path(parameter_dir, "treatment", "stressor_levels.csv"),
      db = db(),
      tables = "stressor_levels",
      remove_timestamps = NULL,
      check_timestamps = FALSE,
      backup_removed = TRUE
    )
  )
  
}
```

# 1. Re-calculations for all timestamps
## Reclassification of Flowcam

### Prepare Flowcam
```{r}
#| label: flowcam_prepare
#| 

timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.flowcam\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.fast\\.flowcam\\.", "", timestamps)
timestamps <- 
```

### Classify Flowcam
```{r}
#| label: flowcam_classify
#| 

out <- file.path(params$output_dir, "flowcam")
if (!file.exists(out)) {
  message("Classifying flowcam...")
  system.time(
    LEEF_2_classify_flowcam_archive(
      archive_dir = file.path(params$extracted_dir, ".."), 
      timestamps = timestamps, 
      algae_traits_name = "algae_traits_filtered.rds", 
      classifier_cname = "svm_flowcam_classifiers.rds", 
      classifier_increasing_name = "svm_flowcam_classifiers.rds", 
      species_tracked = yaml::read_yaml(paste0(base, "parameter/flowcam/flowcam.yml"))$species_tracked,
      output = out,
      mc.cores = params$cores
    )
  )
} else {
  message(
    "Directory ", out, "exists\n",
    "skipping Flowcam."
  )
}
```


### Clean Up Flowcam
```{r}
#| label: flowcam_cleanup
#| 

rm(timestamps)
```


### Calculate Biomass Flowcam
The biomass is calculated here

```{r}
#| label: flowcam_biomass
#| 

fns <- list.files(
  path = file.path(params$output_dir, "flowcam"), 
  pattern = "algae_traits",
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "algae_traits", 
        replacement = "algae_density"
      )
    biomass_flowcam <- LEEF_2_biomass_flowcam(
      algae_traits = readRDS(fn_traits),
      algae_density = readRDS(fn_dens)
    )
    
    saveRDS(biomass_flowcam$traits, file = fn_traits)
    saveRDS(biomass_flowcam$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)

```


## Bemovi 16 - Reclassification
### Prepare Bemovi 16
```{r}
#| label: bemovi_16_prepare
#| 

timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.16\\.bemovi\\.", "", timestamps)
```

### Classify `bemovi_extract.mag.16.yml`
```{r classify_bemovi_16}
moving_background <- NULL

out <- file.path(params$output_dir, "bemovi_mag_16")

if (!file.exists(out)) {
  message("Classifying bemovi_extract.mag.16")
  system.time(
    suppressMessages(
      LEEF_2_classify_bemovi_archive( 
        timestamps = timestamps, 
        archive_dir = params$archive_dir, 
        magnification = 16, 
        classifier_name = "svm_video_classifiers_16x.rds", 
        bemovi_extract_name = "bemovi_extract.mag.16.yml", 
        species_tracked = yaml::read_yaml(paste0(base, "parameter/bemovi.mag.16/bemovi_extract.mag.16.yml"))$species_tracked,
        output = out,
        exclude_videos = moving_background,
        mc.cores = params$cores
      )
    )
  )
} else {
  message(
    "Directory ", out, " exists\n",
    "Skipping 'bemovi_extract.mag.16.'"
  )
}
```

### Clean Up Bemovi 16
```{r}
#| label: bemovi_16_cleanup
#| 

rm(timestamps)
```

### Calculate Biomass Bemovi 16
The biomass is calculated here

```{r}
#| label: bemovi_16_biomass
#| 

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_16"), 
  pattern = "morph_mvt",
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "morph_mvt", 
        replacement = "mean_density_per_ml"
      )
    biomass_bemovi_16 <- LEEF_2_biomass_bemovi_16(
      ciliate_traits_16 = readRDS(fn_traits),
      ciliate_density_16 = readRDS(fn_dens)
    )
    
    saveRDS(biomass_bemovi_16$traits, file = fn_traits)
    saveRDS(biomass_bemovi_16$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)

```


## Bemovi 25 - Reclassification of 
### Prepare Bemovi 25
```{r}
#| label: bemovi_25_prepare

timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.bemovi\\.mag\\.25\\.bemovi\\.", "", timestamps)
```

### Classify `bemovi_mag.25` excluding moving_background

```{r classify_bemovi_25}

moving_background <- NULL

out <- file.path(params$output_dir, "bemovi_mag_25")
if (!file.exists(out)) {
  system.time(
    suppressMessages(
      LEEF_2_classify_bemovi_archive( 
        timestamps = timestamps, 
        archive_dir = params$archive_dir, 
        magnification = 25, 
        classifier_name = "svm_video_classifiers_25x.rds", 
        bemovi_extract_name = "bemovi_extract.mag.25.yml", 
        species_tracked = yaml::read_yaml(paste0(base, "parameter/bemovi.mag.25/bemovi_extract.mag.25.yml"))$species_tracked,
        output = out,
        exclude_videos = moving_background,
        mc.cores = params$cores
      )
    )
  )
  system.time(
    suppressMessages(
      LEEF_2_classify_bemovi_archive( 
        timestamps = timestamps, 
        archive_dir = params$archive_dir, 
        magnification = 25, 
        classifier_name = "svm_video_classifiers_25x.rds", 
        bemovi_extract_name = "bemovi_extract.mag.25.non_cropped.yml", 
        species_tracked = yaml::read_yaml(paste0(base, "parameter/bemovi.mag.25/bemovi_extract.mag.25.non_cropped.yml"))$species_tracked,
        output = out,
        exclude_videos = moving_background,
        mc.cores = params$cores
      )
    )
  )
  system.time(
    suppressMessages(
      LEEF_2_classify_bemovi_archive( 
        timestamps = timestamps, 
        archive_dir = params$archive_dir, 
        magnification = 25, 
        classifier_name = "svm_video_classifiers_25x.rds", 
        bemovi_extract_name = "bemovi_extract.mag.25.cropped.yml", 
        species_tracked = yaml::read_yaml(paste0(base, "parameter/bemovi.mag.25/bemovi_extract.mag.25.cropped.yml"))$species_tracked,
        output = out,
        exclude_videos = moving_background,
        mc.cores = params$cores
      )
    )
  )
} else {
  message(
    "Directory ", out, "exists\n",
    "Skipping 'bemovi_mag_25'"
  )
}
```

### Clean Up Bemovi 25
```{r}
#| label: bemovi_25_cleanup
#| 

rm(timestamps)
```


### Calculate Biomass Bemovi 25
The biomass is calculated here

```{r}
#| label: bemovi_25_biomass
#| 

## Bemovi 25

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_25"), 
  pattern = "morph_mvt\\.",
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "morph_mvt", 
        replacement = "mean_density_per_ml"
      )
    biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25(
      ciliate_traits_25 = readRDS(fn_traits),
      ciliate_density_25 = readRDS(fn_dens)
    )
    
    saveRDS(biomass_bemovi_25$traits, file = fn_traits)
    saveRDS(biomass_bemovi_25$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)

## Bemovi 25 cropped

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_25"), 
  pattern = "morph_mvt_cropped\\.",
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "morph_mvt", 
        replacement = "mean_density_per_ml"
      )
    biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25_cropped(
      ciliate_traits_25 = readRDS(fn_traits),
      ciliate_density_25 = readRDS(fn_dens)
    )
    
    saveRDS(biomass_bemovi_25$traits, file = fn_traits)
    saveRDS(biomass_bemovi_25$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)

## Bemovi 25 non_cropped

fns <- list.files(
  path = file.path(params$output_dir, "bemovi_mag_25"), 
  pattern = "morph_mvt_non_cropped\\.",
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "morph_mvt", 
        replacement = "mean_density_per_ml"
      )
    biomass_bemovi_25 <- LEEF_2_biomass_bemovi_25_non_cropped(
      ciliate_traits_25 = readRDS(fn_traits),
      ciliate_density_25 = readRDS(fn_dens)
    )
    
    saveRDS(biomass_bemovi_25$traits, file = fn_traits)
    saveRDS(biomass_bemovi_25$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)

```


## TODO Flowcytometer

### Prepare Flowcytometer
```{r prepare_flowcytometer}
timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.flowcytometer\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.fast\\.flowcytometer\\.", "", timestamps)
```

### Flowcytometer densities

Regate using H and re-calculate the densities
#### All Samples
```{r densities}

## Select all timestamps

timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.flowcytometer\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.fast\\.flowcytometer\\.", "", timestamps)

density_flowcytometer_archive(
  extracted_dir = params$extracted_dir,
  gates_coordinates = read.csv(gates_coordinates),
  timestamps = timestamps,
  output = file.path(params$output_dir, "flowcytometer"),
  use_H = TRUE,
  min_FSC.A = params$min_FSC.A,
  log10_all = TRUE,
  particles = "bacteria",
  mc.cores = params$cores
)

```


### Trait Extraction Flowcytometer and Volume Calculation

```{r biomass}
## Select all timestamps
timestamps <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.flowcytometer\\.",
  recursive = FALSE, 
  full.names = FALSE
)
timestamps <- gsub("^LEEF\\.fast\\.flowcytometer\\.", "", timestamps)

extract_traits_flowcytometer_archive(
  extracted_dir = params$extracted_dir,
  gates_coordinates = read.csv(gates_coordinates),
  particles = "bacteria",
  use_H = TRUE,
  min_FSC.A = params$min_FSC.A,
  log10_all = TRUE, 
  timestamps = timestamps,
  output = file.path(params$output_dir, "flowcytometer_traits"),
  length_slope =  read.csv(conv_FSCA_length)$slope,
  length_intercept =  read.csv(conv_FSCA_length)$intercept,
  mc.cores = params$cores
)
```


### Flowcytometer select species needed
This can only be done in densities!

```{r}
#| label: flowcytometer_remove_categories
#| 

fns <- list.files(
  file.path(params$output_dir, "flowcytometer"),
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn){
    x <- readRDS(fn) |>
      dplyr::filter(species %in% params$keep_flowcytometer)
    unlink(fn)
    saveRDS(x, file = fn)
  }, 
  mc.cores = params$cores
)
```

### Clean Up Floowcytometer
```{r}
#| label: bemovi_16_cleanup
#| 

rm(timestamps)
```


### Calculate Biomass Flowcytometer
The biomass is calculated here

```{r}
#| label: flowcytometer_biomass
#| 

fns <- list.files(
  path = file.path(params$output_dir, "flowcytometer_traits"), 
  recursive = FALSE,
  full.names = TRUE
)

pbmcapply::pbmclapply(
  fns,
  function(fn_traits){
    fn_dens <- fn_traits |> 
      gsub(
        pattern = "/flowcytometer_traits/", 
        replacement = "/flowcytometer/"
      )
    biomass_flowcytometer <- LEEF_1_biomass_flowcytometer(
      traits = readRDS(fn_traits),
      density = readRDS(fn_dens)
    )
    
    saveRDS(biomass_flowcytometer$traits, file = fn_traits)
    saveRDS(biomass_flowcytometer$density, file = fn_dens)
  }, 
  mc.preschedule = FALSE,
  mc.cores = params$cores
)
```

## TODO Add to database and create indices
Old timestamps will be removed and not be backed up.

```{r addRRD_copy}
file.copy(db(), db(1, temp = TRUE))
```
```{r addRRD_b16}
## Bemovi_16

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "bemovi_mag_16"
  )
)
```
```{r addRRD_b25}
## Bemovi_25

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "bemovi_mag_25"
  )
)
```
```{r addRRD_fc}
## flowcam

suppressMessages(
  add_reclassified_to_db(
    path = params$output_dir, 
    db = db_name(1, temp = TRUE), 
    remove_timestamps = NULL,
    backup_removed = FALSE,
    methods = "flowcam"
  )
)
```

```{r addRRD_fcydens}
## Flowcytometer Densities

fns_dens <- list.files(
  path =  file.path(params$output_dir, "flowcytometer"), 
  pattern = "^flowcytometer_density\\..*\\.rds",
  recursive = FALSE, 
  full.names = TRUE
)

suppressMessages(
  add_to_db(
    fns_dens,
    db = db_name(1, temp = TRUE),
    tables = rep("flowcytometer__flowcytometer_density", length(fns_dens)),
    remove_timestamps = NULL,
    check_timestamps = FALSE,
    backup_removed = TRUE
  )
)
```
```{r addRRD_fcytraits}
## Flowcytometer Traits

fns_traits <- list.files(
  path =  file.path(params$output_dir, "flowcytometer_traits"), 
  pattern = "^flowcytometer_traits_bacteria\\..*\\.rds",
  recursive = FALSE, 
  full.names = TRUE
)

suppressMessages(
  add_to_db(
    fns_traits,
    db = db_name(1, temp = TRUE),
    tables = rep("flowcytometer__flowcytometer_traits", length(fns_traits)),
    remove_timestamps = NULL,
    check_timestamps = FALSE,
    backup_removed = TRUE
  )
)
```
```{r addRRD_indices}
RRD_create_indices(
  db_name(1, temp = TRUE), 
  LEEF = "LEEF-1", 
  continue_after_error = TRUE
)

```
```{r}
#| label: addRRD_finalize
#| 

file.rename(db_name(1, temp = TRUE), db_name(1, temp = FALSE))
```




# TODO 3. Add O2, Manualcount and TOC measuremnts 

## Prepare
```{r}
#| label: prepare_tab
file.copy(db_name(2, temp = FALSE), db_name(3, temp = TRUE))
```

## Add detrended TOC - Removing the linear trend in the water chemistry 
```{r}
#| label: add_toc
#| 

toc <- readRDS(params$toc) %>%
  left_join(
    db_read_table(db = db_name(3, temp = TRUE), table = "experimental_design") %>% 
      collect(),
    by = join_by(bottle)
    ) %>%
  filter(!is.na(conc))

colnames_toc <- colnames(toc)

toc$day <- as.Date(as.character(toc$timestamp), "%Y%m%d") - min(as.Date(as.character(toc$timestamp), "%Y%m%d") )
toc$day <- as.numeric(toc$day)

toc$analysis_time2 <- lubridate::as_datetime(toc$anaysis_time, format="%Y-%m-%d %H:%M") # wrong time zones, but doesn't matter 
toc$analysis_time2 <- sapply(toc$analysis_time2, function(d){
  paste0(unlist(strsplit(as.character(d), "-")), collapse = "")
})

toc <- toc %>%
  dplyr::mutate(
    light_phase = case_when(
      temperature == "constant" ~ "constant",
      day < 93 ~ "constant before decrease",
      day >= 93 & day < 198 ~ "decreasing",
      day >= 198 ~ "constant after decrease"),
    int = interaction(analysis_time2, light_phase)
  )  %>%
  arrange(timestamp)

toc_list <- split(
  toc, 
  f = toc$int, 
  drop = T
)

toc_list <- pbmcapply::pbmclapply(
  toc_list, 
  function(df){
    if(nrow(df) < 3*4) { # at least 3 bottles per type to do the detrending
      df$concentration.detrended <- df$conc
      return(df)
    }
    
    df <- lapply(
      c("IC", "TC", "TN", "TOC"), 
      function(Type){
        df2 <- df %>% filter(inj_type==Type)
        m <- lm(conc ~ position, data = df2)
        predict <- predict(m) - predict(m)[1]
        df2$concentration.detrended <- df2$conc - predict
        df2
      }
    )
    do.call("rbind",df)
  }, 
  mc.cores = 7
)

toc <- do.call("rbind",toc_list)
toc$conc_org <- toc$conc
toc$conc  <- toc$concentration.detrended


toc <- toc |>
  select(
    -c(
      "temperature", 
      "richness", 
      "composition", 
      "incubator", 
      "day", 
      "analysis_time2", 
      "light_phase", 
      "int", 
      "concentration.detrended"
    )
  )
toc_det <- tempfile(fileext = ".rds")
saveRDS(toc, toc_det)

add_to_db(
  toc_det,
  db = db_name(3, temp = TRUE),
  tables = "toc__toc",
  remove_timestamps = NULL,
  check_timestamps = TRUE,
  backup_removed = TRUE
)

unlink(toc_det)
```

## Add O2
```{r}
#| label: add_o2
#| 

fns_o2 <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.o2meter\\.",
  recursive = FALSE, 
  full.names = TRUE
) |>
  file.path("o2meter.csv")

suppressMessages(
  add_to_db(
    fns_o2,
    db = db_name(3, temp = TRUE),
    tables = rep("o2meter__o2meter", length(fns_o2)),
    remove_timestamps = NULL,
    check_timestamps = TRUE,
    backup_removed = TRUE
  )
)
```


## Add manualcount
```{r}
#| label: add_manualcount
#| 

fns_mc <- list.files(
  path = params$extracted_dir, 
  pattern = "^LEEF\\.fast\\.manualcount\\.",
  recursive = FALSE, 
  full.names = TRUE
) |>
  file.path("manualcount_density.csv")

suppressMessages(
  add_to_db(
    fns_mc,
    db = db_name(3, temp = TRUE),
    tables = rep("manualcount__manualcount_density", length(fns_mc)),
    remove_timestamps = NULL,
    check_timestamps = TRUE,
    backup_removed = TRUE
  )
)
```


## Finalize
```{r}
#| label: finalize_tab
#| 
file.rename(db_name(3, temp = TRUE), db_name(3, temp = FALSE))
```

# TODO Create Diagnostic Report
The Diagnostic report needs to be created before the renaming as it does rely on the otriginal terminology.

```{r}
#| label: createDiagReport
#| 

report_diagnostic(
  db = db_name(3, temp = FALSE),  
  template = "LEEF_1",
  suffix = paste0("reclassified_", params$version_tag), 
  format = "html"
)
```


# TODO 4. Rename species and columns
```{r}
#| label: rename

file.copy(db_name(3, temp = FALSE), db_name(4, temp = TRUE))

RRD_LEEF_1_rename(db = db_name(4, temp = TRUE))

file.rename(db_name(4, temp = TRUE), db_name(4, temp = FALSE))
```

```{r}
#| label: create final db

file.copy(db_name(4, temp = FALSE), db_name("final", temp = FALSE))
```

# TODO Do a final vacuuming into new database
Vacuuming the database will take some time!

To vacuum the sqlite database, i.e. recover the space from the deletion of rows, please run the following command in the directory where the database is located. I do not expect this to have a big impact on the size.

```{r echo = FALSE}
cat(
  paste0(
    "sqlite3 \"./", basename(db_name("final", temp = FALSE)), "\" 'VACUUM main INTO \"", db_name("final_vacuumed", temp = FALSE), "\"'"
    )
)
```

# TODO Create Overlays
TODO This is still using the extracted and pre-processed folder and needs to be changed to use the reclassified bemovi data. 
```{r}
#| label: overlays
#| eval: false

generate_overlays(
  params = params,
  overwrite = FALSE
)
```



