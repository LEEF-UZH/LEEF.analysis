---
title: "Flowcytometer Biomass Calculation"
author: "Rainer M Krug & Romana Limberger"
format: 
  html:
    toc: true
    toc-location: left
    code-fold: true
    embed-resources: true
params:
  pre_processed_dir: "/Volumes/LEEF-1_archive/LEEF.archived.data/LEEF/3.archived.data/pre_processed/"
  extracted_dir: "/Volumes/LEEF-1_archive/LEEF.archived.data/LEEF/3.archived.data/extracted/"
  output_dir: "~/Desktop/flowcytometer_raw"
  timestamp: 20220309
  particles: "all"
  length_slope: 4.933454e-06
  length_intercept: 2.215799e-01
---


## Introduction

Details the calculation of the biomass and the problem occuring with `FSC.A == 0`

```{r}
#| label: setup

library(LEEF.analysis)
library(LEEF.measurement.flowcytometer)
```

## Calculate  measurements


```{r}
#| label: calculate_traits

if (!dir.exists(file.path(params$output_dir, "pre_processed"))){
  dir.create(file.path(params$output_dir, "pre_processed"), showWarnings = FALSE, recursive = TRUE)
  
  file.copy(
    file.path(params$pre_processed_dir, paste0("LEEF.fast.flowcytometer.", as.character(params$timestamp))),
    file.path(params$output_dir, "pre_processed"),
    recursive = TRUE,
    copy.mode = FALSE
  )
  
  file.rename(
    from = file.path(params$output, "pre_processed", paste0("LEEF.fast.flowcytometer.", as.character(params$timestamp))),
    to   = file.path(params$output, "pre_processed", "flowcytometer")
  )
}

if (!dir.exists(file.path(params$output_dir, "extracted_raw"))){
  dir.create(file.path(params$output_dir, "extracted_raw"), showWarnings = FALSE, recursive = TRUE)
  
  LEEF.measurement.flowcytometer::extractor_flowcytometer(
    input = file.path(params$output, "pre_processed"),
    output = file.path(params$output_dir, "extracted_raw"),
    raw = TRUE
  )
}

if (!dir.exists(file.path(params$output_dir, "extracted_log10"))){
  dir.create(file.path(params$output_dir, "extracted_log10"), showWarnings = FALSE, recursive = TRUE)
  
  LEEF.measurement.flowcytometer::extractor_flowcytometer(
    input = file.path(params$output, "pre_processed"),
    output = file.path(params$output_dir, "extracted_log10"),
    raw = FALSE
  )
}
```

## Read Data

### Size Standard
```{r}
#| label: get_ss

ss <- data.frame(
  diameter_micrometer = c(1L, 3L, 10L), 
  mean_FSC.A = c(102045L, 641752L, 1959230L), 
  log_mean_FSC.A = c(5.008792, 5.807367, 6.292085)
)
```


### Log10 transformed
```{r}
#| label: get_log10

datadir <- file.path(params$output_dir, "extracted_log10", "flowcytometer")

# write.csv(
#   data.frame(
#     bacteria1 = c(0, 10000000, 10000000, 0),
#     bacteria2 = c(0, 0,        10000000, 10000000),
#     LNA = c(3,4.579784, NA, NA),
#     MNA = c(4.579785, 4.954243, NA, NA),
#     HNA = c(4.954244, 7, NA, NA),
#     algae1 = c(3, 3, 7, 7),
#     algae2 = c(4, 7, 7, 4)
#   ),
#   file = file.path(datadir, "gates_coordinates.csv")
# )

traits_log10 <- LEEF.measurement.flowcytometer::extract_traits(
  input = datadir,
  particles = params$particles,
  metadata_flowcytometer = read.csv(file.path(datadir, "metadata_flowcytometer.csv"))
)
paste0("Count       : ",  traits_log10[[1]]$FSC.A |> length())
paste0("Range       : ",  paste0(traits_log10[[1]]$FSC.A |> range(), collapse = " -- "))
paste0("Portion == 0: ", ((traits_log10[[1]]$FSC.A == 0) |> sum()) / (traits_log10[[1]]$FSC.A |> length()))
traits_log10[[1]]$FSC.A |> table() |> head()
```

### Raw 
```{r}
#| label: get_raw

datadir <- file.path(params$output_dir, "extracted_raw", "flowcytometer")

# write.csv(
#   x = data.frame(
#     bacteria1 = c(0, 15000000, 15000000, 0   ),
#     bacteria2 = c(0, 0,    15000000, 15000000),
#     LNA = c(3,4.579784, NA, NA),
#     MNA = c(4.579785, 4.954243, NA, NA),
#     HNA = c(4.954244, 7, NA, NA),
#     algae1 = c(3, 3, 7, 7),
#     algae2 = c(4, 7, 7, 4)
#   ),
#   file = file.path(datadir, "gates_coordinates.csv")
# )


traits_raw <- LEEF.measurement.flowcytometer::extract_traits(
  input = datadir,
  particles = params$particles,
  metadata_flowcytometer = read.csv(file.path(datadir, "metadata_flowcytometer.csv"))
)

paste0("Count       : ",  traits_raw[[1]]$FSC.A |> length())
paste0("Range       : ",  paste0(traits_raw[[1]]$FSC.A |> range(), collapse = " -- "))
paste0("Portion == 0: ", ((traits_raw[[1]]$FSC.A == 0) |> sum()) / (traits_raw[[1]]$FSC.A |> length()))
traits_raw[[1]]$FSC.A |> table() |> head()
```


## Some Plots

The Size standard and the extrapolation
```{r}
#| label: plot_size_standard
#| 

plot(ss$mean_FSC.A, ss$diameter_micrometer, xlim = c(0, 3000000), ylim = c(0, 20))
abline(a = params$length_intercept, b = params$length_slope)
abline(v = min(traits_raw[[1]]$FSC.A))
abline(v = max(traits_raw[[1]]$FSC.A))
abline(h = 0)
```

## Density distribution of raw and log10 transformed

### SSC.A
```{r}
#| label: table
#| 

i0 <- traits_raw[[1]]$FSC.A == 0
i1 <- traits_raw[[1]]$FSC.A == 1

traits_raw[[1]]$SSC.A[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$SSC.A[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$SSC.A[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FL1.A
```{r}
traits_raw[[1]]$FL1.A[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL1.A[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL1.A[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FL1.A
```{r}
traits_raw[[1]]$FL1.A[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL2.A[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL2.A[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FL3.A
```{r}
traits_raw[[1]]$FL3.A[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL3.A[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL3.A[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FL4.A
```{r}
traits_raw[[1]]$FL4.A[i0] |> density(to = 2000, bw = 1) |> plot()
traits_raw[[1]]$FL4.A[i1] |> density(to = 2000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL4.A[!i0] |> density(to = 2000, bw = 1) |> lines(col = "green")
```

### FL2.A
```{r}
traits_raw[[1]]$FL2.A[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL2.A[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL2.A[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FSC.H
```{r}
traits_raw[[1]]$FSC.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FSC.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FSC.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### SSC.H
```{r}
traits_raw[[1]]$SSC.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$SSC.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$SSC.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```

### FL1.H
```{r}
traits_raw[[1]]$FL1.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL1.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL1.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```
### FL2.H
```{r}
traits_raw[[1]]$FL2.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL2.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL2.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```
### FL3.H
```{r}
traits_raw[[1]]$FL3.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL3.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL3.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```
### FL4.H
```{r}
traits_raw[[1]]$FL4.H[i0] |> density(to = 10000, bw = 1) |> plot()
traits_raw[[1]]$FL4.H[i1] |> density(to = 10000, bw = 1) |> lines(col = "red")
traits_raw[[1]]$FL4.H[!i0] |> density(to = 10000, bw = 1) |> lines(col = "green")
```
### Width
```{r}
traits_raw[[1]]$Width[i0] |> density(to = 500, bw = 1) |> plot()
traits_raw[[1]]$Width[i1] |> density(to = 500, bw = 1) |> lines(col = "red")
traits_raw[[1]]$Width[!i0] |> density(to = 500, bw = 1) |> lines(col = "green")
```

