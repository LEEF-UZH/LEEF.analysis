---
title: "Assessment Size Standards fsc"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
params: 
  root_dir: "~/Desktop/size_check_beads"

---

## Assessment of Size Standards

ADD HOW CALCULATED / EXTRACTED

```{r}
#| label: setup
#| 
#| 

library(ggplot2)
library(LEEF.analysis)
library(dplyr)
library(ggplot2)
```

```{r}
#| label: load_or_extract_traits


# log transform everything which had not been transformed in the pipeline
samples <- c("20230324_beads_threshold_fsc20", "20230327_beads_threshold_fsc")

traits <- lapply(
  samples,
  function(sample){
    if (file.exists(file.path(params$root_dir, sample, "traits.rds"))) {
      traits <- readRDS(file.path(params$root_dir, sample, "traits.rds"))
      traits$bead_size <- NA
    } else {
      fsa <- readRDS(file.path(params$root_dir, sample, "2.extracted_data", "flowcytometer", "flowcytometer_fsa_ungated.rds"))
      fsa <- flowCore::transform(
        fsa,
        flowCore::transformList(
          c("FL2-A", "FL1-H", "FL2-H", "FL3-H", "FL4-H", "FSC-H", "SSC-H"),
          flowCore::truncateTransform("truncate at 1")
        )
      )
      fsa <- flowCore::transform(
        fsa,
        flowCore::transformList(
          c("FL2-A", "FL1-H", "FL2-H", "FL3-H", "FL4-H", "FSC-H", "SSC-H"), 
          "log10"
        )
      )
      
      metadata <- utils::read.csv(file.path(params$root_dir, sample, "2.extracted_data", "flowcytometer", "metadata_flowcytometer.csv"))
      
      gates_coordinates <- data.frame(
        bacteria1 = c(3.301029996, 3.301029996, 7.204119983, 7.204119983), 
        bacteria2 = c(0,           3.301029996, 6.301029996, 0.         ), 
        LNA =       c(3.301029996, 4.579784,    NA,          NA         ), 
        MNA =       c(4.579785,    4.954243,    NA,          NA         ), 
        HNA =       c(4.954244,    7.204119983, NA,          NA         ), 
        algae1 =    c(3,           3,           7.204119983, 7.204119983), 
        algae2 =    c(3.301029996, 7.204119983, 7.204119983, 3.301029996)
      )
      
      traits <- LEEF.measurement.flowcytometer::extract_traits(
        particles = "all",
        metadata_flowcytometer = metadata,
        use_H = FALSE, 
        excl_FSCA_0 = FALSE,
        timestamp = 99999999,
        gates_coordinates = gates_coordinates,
        fsa = fsa
      )[[1]]
      
      traits$beads[traits$sample == "A01"] <- "0.2"
      traits$beads[traits$sample == "A02"] <- "0.45"
      traits$beads[traits$sample == "A03"] <- "0.88"
      traits$beads[traits$sample == "A04"] <- "1.25"
      traits$beads[traits$sample == "A05"] <- "1, 3, 10"
      traits$beads[traits$sample == "A06"] <- "1, 3, 10"

      traits$bead_size <- NA
    }
    return(traits)
  }
)
```


## 20230324_beads_threshold_fsc20
I excluded all values < 0.5 from the plots.

### 0.2 Beads
```{r}
beads_type <- "0.2"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)
```


### 0.45 Beads
```{r}
beads_type <- "0.45"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)


traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001) +
  geom_vline(xintercept = c(3.5, 4.05), col = "green")

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 3.5 & traits[[1]]$SSC.A <= 4.05
traits[[1]][i,]$bead_size <- 0.45
```

### 0.88 Beads
```{r}
beads_type <- "0.88"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001)

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001) +
  geom_vline(xintercept = c(4.2, 4.6), col = "green")

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 4.2 & traits[[1]]$SSC.A <= 4.6
traits[[1]][i,]$bead_size <- 0.88

```

### 1.25 Beads
```{r}
beads_type <- "1.25"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(4, 8), bw = 0.001)

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(4, 7), bw = 0.001) +
  geom_vline(xintercept = c(4.9, 5.25), col = "green")

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 4.9 & traits[[1]]$SSC.A <= 5.25
traits[[1]][i,]$bead_size <- 1.25
```


### 1, 3, 10 Beads
```{r}
beads_type <- "1, 3, 10"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(4.5,8), bw = 0.001)

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(4.5, 7), bw = 0.001) +
  geom_vline(xintercept = c(4.7, 4.95), col = "green") +  
  geom_vline(xintercept = c(5.5, 5.8), col = "green") +  
  geom_vline(xintercept = c(6.1, 6.45), col = "green")

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 4.7 & traits[[1]]$SSC.A <= 4.95
traits[[1]][i,]$bead_size <- 1

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 5.5 & traits[[1]]$SSC.A <= 5.8
traits[[1]][i,]$bead_size <- 3

i <- traits[[1]]$beads == beads_type & traits[[1]]$SSC.A >= 6.1 & traits[[1]]$SSC.A <= 6.45
traits[[1]][i,]$bead_size <- 10
```



## 20230327_beads_threshold_fsc
I excluded all values < 0.5 from the plots.

### 0.2 Beads
```{r}
beads_type <- "0.2"

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)

traits[[1]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)
```


### 0.45 Beads
```{r}
beads_type <- "0.45"

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(0.5, 6), bw = 0.001)


traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001) +
  geom_vline(xintercept = c(3.5, 4.05), col = "green")

i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 3.5 & traits[[2]]$SSC.A <= 4.05
traits[[2]][i,]$bead_size <- 0.45

```

### 0.88 Beads
```{r}
beads_type <- "0.88"

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001)
traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(3, 6), bw = 0.001) +
  geom_vline(xintercept = c(4.4, 4.7), col = "yellow") + 
  geom_vline(xintercept = c(4.3, 4.56), col = "green")

i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 4.3 & traits[[2]]$SSC.A <= 4.56
traits[[2]][i,]$bead_size <- 0.88

```

### 1.25 Beads
```{r}
beads_type <- "1.25"

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(4, 6), bw = 0.001)

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(4, 6), bw = 0.001) +
  geom_vline(xintercept = c(4.9, 5.25), col = "green")

i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 4.9 & traits[[2]]$SSC.A <= 5.25
traits[[2]][i,]$bead_size <- 1.25
```


### 1, 3, 10 Beads
```{r}
beads_type <- "1, 3, 10"

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = FSC.A)) + 
  ggplot2::geom_density(bounds = c(4.5,8), bw = 0.001)

traits[[2]] |> 
  dplyr::filter(beads == beads_type) |>
  ggplot(aes( x = SSC.A)) + 
  ggplot2::geom_density(bounds = c(4.5, 7), bw = 0.001) +
  geom_vline(xintercept = c(4.7, 4.95), col = "green") +  
  geom_vline(xintercept = c(5.5, 5.8), col = "green") +  
  geom_vline(xintercept = c(6.1, 6.45), col = "green")

i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 4.7 & traits[[2]]$SSC.A <= 4.95
traits[[2]][i,]$bead_size <- 1
i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 5.5 & traits[[2]]$SSC.A <= 5.8
traits[[2]][i,]$bead_size <- 3
i <- traits[[2]]$beads == beads_type & traits[[2]]$SSC.A >= 6.1 & traits[[2]]$SSC.A <= 6.45
traits[[2]][i,]$bead_size <- 10
```

# Number of particles per bead size
```{r}
#| label: acatterplots
#| 
traits[[1]]$bead_size |> table()
traits[[2]]$bead_size |> table()
```

# Scatterplots
```{r}
#| label: scatterplots
#| 

i <- !is.na(traits[[1]]$bead_size)
scattermore::scattermoreplot(traits[[1]]$SSC.A[i], traits[[1]]$bead_size[i], xlab = "SSC.A", ylab = "Bead Size")

i <- !is.na(traits[[2]]$bead_size)
scattermore::scattermoreplot(traits[[2]]$SSC.A[i], traits[[2]]$bead_size[i], xlab = "SSC.A", ylab = "Bead Size")

```


# Bead size distributions

We were provided with size distributions of four of the bead sizes:

![Bead size distributions](assets/size_standard_histograms.jpg)

Find approximate standard deviations:

```{r}
p1 <- ggplot(data = data.frame(x = c(1, 4)-3), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = log10(0.200), sd = 0.1)) + ylab("") +
  scale_y_continuous(breaks = NULL) +
  ggtitle("0.20 micron beads")
p1

p2 <- ggplot(data = data.frame(x = c(1, 4)-3), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = log10(0.450), sd = 0.1)) + ylab("") +
  scale_y_continuous(breaks = NULL) +
  ggtitle("0.45 micron beads")
p2

p3 <- ggplot(data = data.frame(x = c(1, 4)-3), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = log10(0.880), sd = 0.1)) + ylab("") +
  scale_y_continuous(breaks = NULL) +
  ggtitle("0.8 micron beads")
p3

p4 <- ggplot(data = data.frame(x = c(2.8, 4)-3), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = log10(1.250), sd = 0.02)) + ylab("") +
  scale_y_continuous(breaks = NULL) +
  ggtitle("1.25 micron beads")
p4
```

```{r}
dd1 <- traits[[1]] %>%
  filter(!is.na(bead_size)) %>%
  mutate(raw_FSC.A = 10^FSC.A) %>%
  group_by(bead_size) %>%
  slice_sample(n = 150)

standard_deviation_bead_sizes <- sd(log10(dd1$bead_size))
standard_deviation_bead_sizes



```


## OP1: Correcting for measurement error

The slope is attenuated by a factor gamma, where gamma is the variance of the observed x values divided by the sum of the variances of the observed x values and the variance in the measurement process.

On a log scale we have an error variance of about 0.1^2 = 0.01 and variance in observations of about 0.43^2 = 0.18. This gives an attenuation factor of 0.18 / 0.19 = 0.94. Therefore to get the true slope we divide the observed one by 0.94 (or multiply by 1.06). (See previous section if you'd like more information.)

However, we actually do the regression with FSC as the independent variable, and do not have information on uncertainty in that, so we can't correct the slope.


## OP2: Calibration curves (use one of these)

First I thought to take a make a stratified random sample of data points so that each bead size category has the same number of data points. I think it not worth weighting by the distribution of FSC.A values in observations.

```{r}
dd1 <- traits[[1]] %>%
  filter(!is.na(bead_size)) %>%
  mutate(raw_FSC.A = 10^FSC.A) %>%
  group_by(bead_size) %>%
  slice_sample(n = 150)
```

```{r}
ggplot(data = dd1, aes(raw_FSC.A, bead_size)) +
  geom_jitter() +
  geom_smooth(method = "lm")
```


Now the regression for predicting bead size from FSC.A. There is a filter to constrain the range of FSC.A used in the regression. 


```{r}
dd2 <- dd1 %>%
  filter(bead_size < 2.5)
ggplot(data = dd2, aes(FSC.A, bead_size)) +
  geom_jitter() +
  xlim(0, 8) + 
  ylim(0, 2.5) +
  geom_smooth(method = "lm", fullrange = TRUE)
m2 <- lm(bead_size ~ FSC.A, dd2)

## The model diagnostics are not too important, since we are not hypothesis testing and also because there is a lot of data, so even extreme data points can't be very influential.
par(mfrow=c(2,2))
plot(m2)

## And the coefficients
summary(m2)
```




Now the same with log(FSC.A) (limited x range)

```{r}

ggplot(data = dd2, aes(raw_FSC.A, bead_size)) +
  geom_jitter() +
  xlim(0, 2e+5) + 
  ylim(0, 2.5) +
  geom_smooth(method = "lm", fullrange = TRUE)
m2 <- lm(bead_size ~ FSC.A, dd2)

## The model diagnostics are not too important, since we are not hypothesis testing and also because there is a lot of data, so even extreme data points can't be very influential.
par(mfrow=c(2,2))
plot(m2)

## And the coefficients
summary(m2)
```


# Save
```{r}
#| label: save
#| 

for (i in 1:length(samples)){
  saveRDS(traits[[i]], file.path(params$root_dir, samples[[i]], "traits.rds"))
}      

```
